use std::str::FromStr;
use std::collections::HashSet;
use crate::zql::ast::*;
use std::collections::HashMap;
use pgrx::*;

grammar(source_index: Option<&PgRelation>, used_fields: &mut HashSet<&'input str>, fieldname_stack: &mut Vec<&'input str>, operator_stack: &mut Vec<ComparisonOpcode>);

match {
    // top precedence tokens
    ":" => COLON,
    "=" => EQ,
    ">" => GT,
    "<" => LT,
    ">=" => GTE,
    "<=" => LTE,
    "<>" => DOES_NOT_CONTAIN,
    "!=" => NE,
    ":~" => REGEX,
    ":@" => MORE_LIKE_THIS,
    ":@~" => FUZZY_LIKE_THIS,
    "==>" => MATCHES,

    "[" => O_BRACKET,
    "]" => C_BRACKET,

    "(" => O_PAREN,
    ")" => C_PAREN,

    "{" => O_BRACE,
    "}" => C_BRACE,

    r#"(?i)w/"# => WITHIN,
    r#"(?i)wo/"# => WITHIN_ORDER,

    r#"(?i)#subselect"# => SUBSELECT,
    r#"(?i)#expand"# => EXPAND,
    r#"(?i)#filter"# => FILTER,

    r#"[-+]?[0-9]+"# => NUMBER,
    r#"[-+]?[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?"# => FLOAT,

} else {
    // lower precedence operator keyword tokens
    r"(?i)not" => NOT,
    r"(?i)with" => WITH,
    r"(?i)and" => AND,
    r"(?i)or" => OR,

    "!" => EXCLAMATION,
    "%" => PERCENT,
    "&" => AMPERSAND,
    "," => COMMA,

    "^" => CARET,
    r"~\d*" => TILDE,
    "." => DOT,

    r#"(?i)null"# => NULL,
    r#"(?i)true"# => TRUE,
    r#"(?i)false"# => FALSE,

    r#"(?i)/to/"# => TO,
} else {
    // a field name looks a lot like a "simple value", so it needs to be defined
    // with a higher matching precedence
    r#"(?i)[a-z0-9_]+"# => IDENTIFIER,
    r#"(?i)([a-z0-9_]+(\.[a-z0-9_]+)+)"# => DOTTED_IDENTIFIER,
    r#"(?i)`[^`]+`"# => QUOTED_IDENTIFIER,
} else {
    // even lower precedence values
    r#"(([^:=<>~!,&%/\\^\[\](){}"'\t\n\v\f\r ]|(\\.))+\.?)+"# => UNQUOTED_VALUE,
    r#"'(?:\\.|[^'\\])*'"# => QUOTED_VALUE,
    r#""(?:\\.|[^"\\])*""# => DOUBLE_QUOTED_VALUE,
    r#"\[\[[^\]]*\]\]"# => UNPARSED_ARRAY,
}

pub Expr: Box<Expr<'input>> = {
    <OrExpression>,
};

OrExpression: Box<Expr<'input>> = {
    <v:(<AndExpression> OrOp+)+> <r:AndExpression> => {
        let mut final_children:Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::OrList(mut children) => { final_children.append(&mut children); }
            other => { final_children.push(other); }
        }

        Box::new(Expr::OrList(final_children))
    },
    AndExpression,
};

OrOp: Opcode = {
    OR => Opcode::Or,
    COMMA => Opcode::Or,
};

AndExpression: Box<Expr<'input>> = {
    <v:(<WithExpression> AndOp*)+> <r:WithExpression> => {
        let mut final_children:Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::AndList(mut children) => { final_children.append(&mut children); }
            other => { final_children.push(other); }
        }

        Box::new(Expr::AndList(final_children))
    },
    WithExpression,
};

AndOp: Opcode = {
    AND => Opcode::And,
    AMPERSAND => Opcode::And,
};

WithExpression: Box<Expr<'input>> = {
    <v:(<ProximityExpression> WithOp+)+> <r:ProximityExpression> => {
        let mut final_children:Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::WithList(mut children) => { final_children.append(&mut children); }
            other => { final_children.push(other); }
        }

        Box::new(Expr::WithList(final_children))
    },
    ProximityExpression
};

WithOp: Opcode = {
    WITH => Opcode::With,
    PERCENT => Opcode::With,
}

ProximityExpression: Box<Expr<'input>> = {
    <mut parts:ProximityPart+> <words:ProximityGroup> => {
        parts.push(ProximityPart {
            words,
            distance: None
        });

        let field_name = fieldname_stack.last().unwrap();
        let operator = operator_stack.last().unwrap();

        used_fields.insert(field_name);

        Box::new(Expr::from_opcode(field_name, *operator, Term::ProximityChain(parts)))
    },
    UnaryExpression
};

ProximityPart: ProximityPart = {
    <words:ProximityGroup> <in_order:WithinOperator> <distance:NUMBER> => {
        ProximityPart {
            words,
            distance: Some(ProximityDistance {
                distance: u32::from_str(distance).unwrap(),
                in_order
                })
        }
    }
};

ProximityGroup: Vec<ProximityTerm> = {
    ParentheticalGroup => <>.extract_prox_terms(source_index),
    ExpandedPhraseStringExpr => vec![<>]
};

WithinOperator: bool = {
    WITHIN => false,
    WITHIN_ORDER => true
};

UnaryExpression: Box<Expr<'input>> = {
    NotOp <t:UnaryExpression> => Box::new(Expr::Not(t)),
    Subselect => Box::new(<>),
    Expand => Box::new(<>),
    Comparison,
};

NotOp: Opcode = {
    NOT => Opcode::Not,
    EXCLAMATION => Opcode::Not
};

Comparison: Box<Expr<'input>> = {
    FieldName ComparisonOperator Term => {
        fieldname_stack.pop();
        operator_stack.pop();
        Box::new(Expr::from_opcode(<>))
    },
    <field_name:FieldName> <operator:ComparisonOperator> <start:String> TO <end:String> <b:Boost?> => {
        fieldname_stack.pop();
        operator_stack.pop();

        Box::new(Expr::range_from_opcode(<>))
    },
    Term => {
        let field_name = fieldname_stack.last().unwrap();
        let operator = operator_stack.last().unwrap();
        let right = <>;

        used_fields.insert(field_name);

        Box::new(Expr::from_opcode(field_name, *operator, right))
    },
    FieldName ComparisonOperator O_PAREN <Expr> C_PAREN => {
        fieldname_stack.pop();
        operator_stack.pop();
        <>
    },
    O_PAREN <JsonObject> C_PAREN => Box::new(Expr::Json(<>)),
    ParentheticalGroup
};

ParentheticalGroup: Box<Expr<'input>> = {
    O_PAREN <Expr> C_PAREN,
    O_BRACE <Expr> C_BRACE,
}

FieldName: &'input str = {
    IDENTIFIER => {
        let mut fieldname = <>;

        // rewrite a field named "_all" for backwards compatibility w/ old versions of ZDB/ES
        if fieldname == "_all" {
            fieldname = "zdb_all";
        }

        fieldname_stack.push(fieldname);
        used_fields.insert(fieldname);
        fieldname
    },
    DOTTED_IDENTIFIER => {
        fieldname_stack.push(<>);
        used_fields.insert(<>);
        <>
    },
    QUOTED_IDENTIFIER => {
        let fieldname = &<>[1..<>.len()-1];
        fieldname_stack.push(fieldname);
        used_fields.insert(fieldname);
        fieldname
    }
};

UntrackedFieldName: &'input str = {
    IDENTIFIER,
    DOTTED_IDENTIFIER,
    QUOTED_IDENTIFIER,
};

ComparisonOperator: ComparisonOpcode = {
    ComparisonOp => {
        operator_stack.push(<>);
        <>
    }
}

ComparisonOp: ComparisonOpcode = {
    COLON => ComparisonOpcode::Contains,
    EQ => ComparisonOpcode::Eq,
    GT => ComparisonOpcode::Gt,
    LT => ComparisonOpcode::Lt,
    GTE => ComparisonOpcode::Gte,
    LTE => ComparisonOpcode::Lte,
    NE => ComparisonOpcode::Ne,
    DOES_NOT_CONTAIN => ComparisonOpcode::DoesNotContain,
    REGEX => ComparisonOpcode::Regex,
    MORE_LIKE_THIS => ComparisonOpcode::MoreLikeThis,
    FUZZY_LIKE_THIS => ComparisonOpcode::FuzzyLikeThis,
    MATCHES => ComparisonOpcode::Matches,
};

Term: Term<'input> = {
    StringExpr => <>,
    O_BRACKET <v:(<StringExpr> COMMA?)*> C_BRACKET <b:Boost?> => {
        if v.is_empty() {
            Term::MatchNone
        } else {
            Term::ParsedArray(v, b)
        }
    },
    <a:UnparsedArray> <b:Boost?> => {
        if a.trim().is_empty() {
            Term::MatchNone
        } else {
            Term::UnparsedArray(a, b)
        }
    },
};

UnparsedArray: &'input str = {
    UNPARSED_ARRAY => {
        &<>[2..<>.len()-2]
    }
}

StringExpr: Term<'input> = {
    NULL => Term::Null,
    <s:String> <b:Boost?> => {
        match Term::maybe_make_wildcard_or_regex(operator_stack.last(), s.0, b) {
            Term::String(t, b) if s.1 == true => {
                Term::Phrase(t, b)
            },
            other => other
        }
    },
    <s:String> <f:Fuzzy> <b:Boost?> => Term::Fuzzy(s.0, f, b)
};

ExpandedPhraseStringExpr: ProximityTerm = {
    <s:String> <b:Boost?> => ProximityTerm::make_proximity_term(operator_stack.last(), s.0, b),
    <s:String> <f:Fuzzy> <b:Boost?> => ProximityTerm::Fuzzy(s.0.into(), f, b)
};

Boost: f32 = {
    CARET <FLOAT> => f32::from_str(<>).unwrap(),
    CARET <NUMBER> => f32::from_str(<>).unwrap(),
};

Fuzzy: u8 = {
    TILDE => {
        let fuzz = &<>[1..];
        if fuzz.is_empty() {
            3 // default
        } else {
            u8::from_str(fuzz).unwrap()
        }
    }
};

// the 'bool' argument is if it's a quoted string or not
String: (&'input str, bool) = {
    NUMBER => (<>, false),
    FLOAT => (<>, false),
    TRUE => ("true", false),
    FALSE => ("false", false),
    IDENTIFIER => (<>, false),
    DOTTED_IDENTIFIER => (<>, false),
    UNQUOTED_VALUE => (<>, false),
    QUOTED_VALUE => {
        let s = <>;
        let s = &s[1..s.len()-1];
        (s, true)
    },
    DOUBLE_QUOTED_VALUE => {
        let s = <>;
        let s = &s[1..s.len()-1];
        (s, true)
    },
};

TableIndexName: QualifiedIndex = {
    UntrackedFieldName => {
        let name = <>;
        let name = if name.starts_with('`') && name.ends_with('`') {
            // if it's a QUOTED_IDENTIFIER we need to strip off the leading and trailing backticks
            &name[1..name.len()-1]
        } else {
            // intended to use as-is
            name
        };
        let mut parts = name.split_terminator('.');
        let mut schema = parts.next();
        let mut table = parts.next();
        let mut index = parts.next();

        if schema == Some("this") && table == Some("index") && index.is_none() {
            // for backwards compatibility, if the user simply writes <this.index>, we'll
            // force the schema to "public"
            index = table;      // "index"
            table = schema;     // "this"
            schema = Some("public");
        } else if schema.is_none() || table.is_none() || index.is_none() {
            panic!("qualified index ({}) must be schema qualified.  ie, schema.table.index", <>);
        } else if parts.next().is_some() {
            panic!("index link schema.table.index is too long: {}", <>);
        }

        QualifiedIndex {
            schema: Some(schema.unwrap().to_string()),
            table: table.unwrap().to_string(),
            index: index.unwrap().to_string(),
        }
    }
};

pub IndexLink: IndexLink = {
    <left_field:UntrackedFieldName> EQ LT <qualified_index:TableIndexName> GT <right_field:UntrackedFieldName>
        => IndexLink { name: None, left_field: Some(left_field.to_string()), qualified_index, right_field: Some(right_field.to_string()) },
    <name:IDENTIFIER> COLON O_PAREN <left_field:UntrackedFieldName> EQ LT <qualified_index:TableIndexName> GT <right_field:UntrackedFieldName> C_PAREN
        => IndexLink { name: Some(name.to_string()), left_field: Some(left_field.to_string()), qualified_index, right_field: Some(right_field.to_string()) },
};

Subselect: Expr<'input> = {
    SUBSELECT LT <link:IndexLink> GT <q:ParentheticalGroup> => Expr::Subselect(<>)

};

Expand: Expr<'input> = {
    EXPAND LT <link:IndexLink> GT O_PAREN <e:Expr> <f:Filter?> C_PAREN => Expr::Expand(<>)
};

Filter: Box<Expr<'input>> = {
    FILTER O_PAREN <e:Expr> C_PAREN => e
};

JsonObject: String = {
    O_BRACE <v:(<JsonProperty> COMMA)*> <e:JsonProperty?> C_BRACE => {
        let props = match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        };

        let mut json = String::new();
        json.push('{');
        for (i, p) in props.iter().enumerate() {
            if i > 0 { json.push(',') }
            json.push_str(p);
        }
        json.push('}');
        json
    }
};

JsonProperty: String = {
    <k:DOUBLE_QUOTED_VALUE> COLON <v:JsonValue> => format!("{}:{}", k, v),
};

JsonValue: String = {
    JsonObject,
    JsonArray,
    JsonLiteral => <>.to_string()
}

JsonArray: String = {
    O_BRACKET <v:(<JsonValue> COMMA)*> <e:JsonValue?> C_BRACKET => {
        let v = match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        };

        let mut array = String::new();
        array.push('[');
        for (i, v) in v.iter().enumerate() {
            if i > 0 { array.push(','); }
            array.push_str(&v);
        }
        array.push(']');
        array
    }
}

JsonLiteral: &'input str = {
    TRUE,
    FALSE,
    NULL,
    NUMBER,
    FLOAT,
    DOUBLE_QUOTED_VALUE,
};


pub FieldList: HashMap<String, Vec<String>> = {
    <mut field_lists:(<NamedFieldList> COMMA)*> <e:NamedFieldList> => {
        field_lists.push(e);
        let mut map = HashMap::new();
        for field in field_lists {
            if map.contains_key(&field.0) {
                panic!("duplicate named field lists: {}", field.0);
            }
            map.insert(field.0.into(), field.1);
        }
        map
    }
};

NamedFieldList: (String, Vec<String>) = {
    <name:FieldName> EQ O_BRACKET <list:FieldNameList> C_BRACKET => {
        (name.into(), list)
    }
};

FieldNameList: Vec<String> = {
    <mut v:(<FieldName> COMMA)*> <e:FieldName> => {
        v.push(e);
        v.into_iter().map(|e| e.into()).collect()
    }
}