// auto-generated: "lalrpop 0.20.0"
// sha3: 9998006a33e0c91baea56dcdb9ca8eeed48d023c7071a3fadf355bcdea3cac0d
use crate::zql::ast::*;
use pgrx::*;
use std::collections::{HashMap, HashSet};
use std::str::FromStr;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate alloc;
extern crate core;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__Expr {

    use std::str::FromStr;
    use std::collections::HashSet;
    use crate::zql::ast::*;
    use std::collections::HashMap;
    use pgrx::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Box<Expr<'input>>),
        Variant2(alloc::vec::Vec<Box<Expr<'input>>>),
        Variant3(alloc::vec::Vec<&'input str>),
        Variant4(String),
        Variant5(alloc::vec::Vec<String>),
        Variant6((String, Vec<String>)),
        Variant7(alloc::vec::Vec<(String, Vec<String>)>),
        Variant8(Term<'input>),
        Variant9(alloc::vec::Vec<Term<'input>>),
        Variant10(Opcode),
        Variant11(alloc::vec::Vec<Opcode>),
        Variant12(f32),
        Variant13(core::option::Option<f32>),
        Variant14(core::option::Option<&'input str>),
        Variant15(ComparisonOpcode),
        Variant16(Expr<'input>),
        Variant17(ProximityTerm),
        Variant18(HashMap<String, Vec<String>>),
        Variant19(Vec<String>),
        Variant20(core::option::Option<Box<Expr<'input>>>),
        Variant21(u8),
        Variant22(IndexLink),
        Variant23(core::option::Option<String>),
        Variant24(Vec<ProximityTerm>),
        Variant25(ProximityPart),
        Variant26(alloc::vec::Vec<ProximityPart>),
        Variant27((&'input str, bool)),
        Variant28(QualifiedIndex),
        Variant29(bool),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 86, -121, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 89, 0, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 0, 0, 92, 93, 94, 0, 95, 96, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 7
        -167, -167, 0, 0, -167, -167, 0, -167, 0, 0, -167, -167, 0, -167, -167, -167, -167, -167, 0, 0, 0, -167, 0, 0, 0, 0, 0, -167, -167, -167, -167, -167, -167, -167, 104, -167, -167, 0, -167, 0, 0, -167, -167, -167, 105, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 70, 0, 0, 0, 73, 0, 74, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 78, 0, 14, 0, 26, 0, 0, 80, 0, 0, 0, 0, 82, 0, 84, 0, 0, 0,
        // State 10
        -146, -146, 114, 0, -146, -146, 0, -146, 0, 0, -146, -146, 0, -146, -146, -146, -146, -146, 0, 0, 0, -146, 0, 0, 0, 0, 0, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, 0, -146, 115, 0, -146, -146, -146, -146, -78, -78,
        // State 11
        -157, -157, 114, 0, -157, -157, 0, -157, 0, 0, -157, -157, 0, -157, -157, -157, -157, -157, 0, 0, 0, -157, 0, 0, 0, 0, 0, -157, -157, -157, -157, -157, -157, -157, -157, -157, -157, 0, -157, 0, 0, -157, -157, -157, -157, 0, 0,
        // State 12
        118, 119, 0, 0, -42, -42, 0, -42, 0, 0, -37, -37, 0, -37, -37, -37, -42, -37, 0, 0, 0, -37, 0, 0, 0, 0, 0, -37, -37, -37, -42, -37, -37, -37, 0, -37, -37, 0, -37, 0, 0, -37, -37, -37, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 111, 70, 0, 0, 0, 73, 0, 74, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 77, 78, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 82, 0, 84, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 32, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 86, -120, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        -166, -166, 0, 0, -166, -166, 0, -166, 0, 0, -166, -166, 0, -166, -166, -166, -166, -166, 0, 0, 0, -166, 0, 0, 0, 0, 0, -166, -166, -166, -166, -166, -166, -166, 104, -166, -166, 0, -166, 0, 0, -166, -166, -166, 105, 0, 0,
        // State 18
        118, 119, 0, 0, -41, -41, 0, -41, 0, 0, -39, -39, 0, -39, -39, -39, -41, -39, 0, 0, 0, -39, 0, 0, 0, 0, 0, -39, -39, -39, -41, -39, -39, -39, 0, -39, -39, 0, -39, 0, 0, -39, -39, -39, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 86, 0, 0, 0, 0, 0, -2, -2, 0, -2, -2, -2, 0, -2, 0, 0, 0, -2, 0, 0, 0, 0, 0, -2, -2, -2, 87, -2, -2, -2, 0, -2, -2, 0, -2, 0, 0, -2, -2, -2, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 70, 0, 0, 0, 73, 0, 74, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 77, 78, 0, 0, 15, 38, 0, 0, 80, 0, 0, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 21
        -146, -146, 114, 0, -146, -146, -146, -146, 0, 0, -146, -146, 0, -146, -146, -146, -146, -146, 0, 0, 0, -146, 0, 0, 0, 0, 0, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, 0, -146, 115, 0, -146, -146, -146, -146, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, -25, 0, -25, -25, -25, 0, -25, 0, 0, 0, -25, 0, 0, 0, 0, 0, -25, -25, -25, 0, -25, -25, -25, 104, -25, -25, 0, -25, 0, 0, -25, -25, -25, 105, 0, 0,
        // State 23
        -128, -128, 0, 0, -128, -128, 0, -128, 0, 0, -128, -128, 0, -128, -128, -128, -128, -128, 0, 0, 0, -128, 0, 0, 0, 0, 0, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 0, -128, 0, 0, -128, -128, -128, -128, 107, 108,
        // State 24
        -78, -78, 114, 0, -78, -78, 0, -78, 0, 0, -78, -78, 0, -78, -78, -78, -78, -78, 0, 0, 0, -78, 0, 0, 0, 0, 0, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, 115, 0, -78, -78, -78, -78, -78, -78,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 26
        -148, -148, 114, 0, -148, -148, 0, -148, 0, 0, -148, -148, 0, -148, -148, -148, -148, -148, 0, 0, 0, -148, 0, 0, 0, 0, 0, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, 0, -148, 0, 0, -148, -148, -148, -148, -80, -80,
        // State 27
        118, 119, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, 0, -38, -38, -38, 0, -38, 0, 0, 0, -38, 0, 0, 0, 0, 0, -38, -38, -38, 0, -38, -38, -38, 0, -38, -38, 0, -38, 0, 0, -38, -38, -38, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 111, 70, 0, 0, 0, 73, 0, 74, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 77, 78, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 82, 0, 84, 0, 0, 0,
        // State 30
        -153, -153, 114, 0, -153, -153, 0, -153, 0, 0, -153, -153, 0, -153, -153, -153, -153, -153, 0, 0, 0, -153, 0, 0, 0, 0, 0, -153, -153, -153, -153, -153, -153, -153, -153, -153, -153, 0, -153, 0, 0, -153, -153, -153, -153, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 69, 147, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 86, 0, 0, 0, 0, 0, -3, -3, 0, -3, -3, -3, 0, -3, 0, 0, 0, -3, 0, 0, 0, 0, 0, -3, -3, -3, 87, -3, -3, -3, 0, -3, -3, 0, -3, 0, 0, -3, -3, -3, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, 0, -26, -26, -26, 0, -26, 0, 0, 0, -26, 0, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 104, -26, -26, 0, -26, 0, 0, -26, -26, -26, 105, 0, 0,
        // State 35
        118, 119, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, 0, -40, -40, -40, 0, -40, 0, 0, 0, -40, 0, 0, 0, 0, 0, -40, -40, -40, 0, -40, -40, -40, 0, -40, -40, 0, -40, 0, 0, -40, -40, -40, 0, 0, 0,
        // State 36
        -146, -146, 114, 0, -146, -146, 0, -146, 0, 0, -146, -146, 0, -146, -146, -146, -146, -146, 0, 0, 0, -146, 0, 0, 0, 0, 0, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, 0, -146, 115, 43, -146, -146, -146, -146, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 38
        -148, -148, 114, 0, -148, -148, -148, -148, 0, 0, -148, -148, 0, -148, -148, -148, -148, -148, 0, 0, 0, -148, 0, 0, 0, 0, 0, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, 0, -148, 0, 0, -148, -148, -148, -148, 0, 0,
        // State 39
        -80, -80, 114, 0, -80, -80, 0, -80, 0, 0, -80, -80, 0, -80, -80, -80, -80, -80, 0, 0, 0, -80, 0, 0, 0, 0, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, 0, 0, -80, -80, -80, -80, -80, -80,
        // State 40
        -155, -155, 114, 0, -155, -155, 0, -155, 0, 0, -155, -155, 0, -155, -155, -155, -155, -155, 0, 0, 0, -155, 0, 0, 0, 0, 0, -155, -155, -155, -155, -155, -155, -155, -155, -155, -155, 0, -155, 0, 0, -155, -155, -155, -155, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 70, 0, 0, 0, 73, 0, 74, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 82, 0, 84, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 170, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 173, 0, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        -57, -57, 114, 0, -57, -57, 0, -57, 0, 0, -57, -57, 0, -57, -57, -57, -57, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, 0, -57, 0, 0, -57, -57, -57, -57, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 169, 0, 0, 0, 170, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 173, 0, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 169, 0, 0, 0, 170, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 173, 0, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 71, 72, 73, 0, 74, 0, 0, 0, 75, 0, 0, 0, 0, 0, 76, 77, 78, 0, 14, 15, 16, 0, 79, 80, 0, 81, 0, 0, 82, 83, 84, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        -161, -161, 0, 0, -161, -161, 0, -161, 0, 0, -161, -161, 0, -161, -161, -161, -161, -161, 0, 0, 0, -161, 0, 0, 0, 0, 0, -161, -161, -161, -161, -161, -161, -161, -161, -161, -161, 0, -161, 0, 0, -161, -161, -161, -161, 0, 0,
        // State 58
        -160, -160, 0, 0, -160, -160, 0, -160, 0, 0, -160, -160, 0, -160, -160, -160, -160, -160, 0, 0, 0, -160, 0, 0, 0, 0, 0, -160, -160, -160, -160, -160, -160, -160, -160, -160, -160, 0, -160, 0, 0, -160, -160, -160, -160, 0, 0,
        // State 59
        -131, -131, 0, 0, -131, -131, 0, -131, 0, 0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, 0, -131, 0, 0, 0, 0, 0, -131, -131, -131, -131, -131, -131, -131, -131, -131, -131, 0, -131, 0, 0, -131, -131, -131, -131, -131, -131,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, -81, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        -61, -61, 0, 0, -61, -61, 0, -61, 0, 0, -61, -61, 0, -61, -61, -61, -61, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, 0, -61, 0, 0, -61, -61, -61, -61, -130, -130,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, -133, 0, 0, 0, -133, 0, -133, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, -133, 0, -133, 0, -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, -133, 0, 0, 0,
        // State 64
        -151, -151, 0, 0, -151, -151, 0, -151, 0, 0, -151, -151, 0, -151, -151, -151, -151, -151, 0, 0, 0, -151, 0, 0, 0, 0, 0, -151, -151, -151, -151, -151, -151, -151, -151, -151, -151, 0, -151, 0, 0, -151, -151, -151, -151, 0, 0,
        // State 65
        -159, -159, 0, 0, -159, -159, 0, -159, 0, 0, -159, -159, 0, -159, -159, -159, -159, -159, 0, 0, 0, -159, 0, 0, 0, 0, 0, -159, -159, -159, -159, -159, -159, -159, -159, -159, -159, 0, -159, 0, 0, -159, -159, -159, -159, 0, 0,
        // State 66
        -58, -58, 0, 0, -58, -58, 0, -58, 0, 0, -58, -58, 0, -58, -58, -58, -58, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, 0, -58, 0, 0, -58, -58, -58, -58, 0, 0,
        // State 67
        -129, -129, 0, 0, -129, -129, 0, -129, 0, 0, -129, -129, 0, -129, -129, -129, -129, -129, 0, 0, 0, -129, 0, 0, 0, 0, 0, -129, -129, -129, -129, -129, -129, -129, -129, -129, -129, 0, -129, 0, 0, -129, -129, -129, -129, 0, 0,
        // State 68
        -140, -140, -140, -85, -140, -140, 0, -140, -85, 0, -140, -140, -85, -140, -140, -140, -140, -140, -85, -85, -85, -140, -85, -85, -85, -85, -85, -140, -140, -140, -140, -140, -140, -140, -140, -140, -140, -85, -140, -140, 0, -140, -140, -140, -140, -140, -140,
        // State 69
        -143, -143, -143, 0, -143, -143, -143, -143, 0, 0, -143, -143, 0, -143, -143, -143, -143, -143, 0, 0, 0, -143, 0, 0, 0, 0, 0, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, 0, -143, -143, -143, -143, -143, -143, -143, -143, -143,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, 0, -119, -119, -119, 0, -119, 0, 0, 0, -119, 0, 0, 0, 0, 0, -119, -119, -119, 0, -119, -119, -119, 0, -119, -119, 0, -119, 0, 0, -119, -119, -119, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        -138, -138, -138, 0, -138, -138, -138, -138, 0, 0, -138, -138, 0, -138, -138, -138, -138, -138, 0, 0, 0, -138, 0, 0, 0, 0, 0, -138, -138, -138, -138, -138, -138, -138, -138, -138, -138, 0, -138, -138, -138, -138, -138, -138, -138, -138, -138,
        // State 73
        -136, -136, -136, 0, -136, -136, -136, -136, 0, 0, -136, -136, 0, -136, -136, -136, -136, -136, 0, 0, 0, -136, 0, 0, 0, 0, 0, -136, -136, -136, -136, -136, -136, -136, -136, -136, -136, 0, -136, -136, -136, -136, -136, -136, -136, -136, -136,
        // State 74
        -139, -139, -139, -84, -139, -139, 0, -139, -84, 0, -139, -139, -84, -139, -139, -139, -139, -139, -84, -84, -84, -139, -84, -84, -84, -84, -84, -139, -139, -139, -139, -139, -139, -139, -139, -139, -139, -84, -139, -139, 0, -139, -139, -139, -139, -139, -139,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, 0, -118, -118, -118, 0, -118, 0, 0, 0, -118, 0, 0, 0, 0, 0, -118, -118, -118, 0, -118, -118, -118, 0, -118, -118, 0, -118, 0, 0, -118, -118, -118, 0, 0, 0,
        // State 76
        -144, -144, 0, 0, -144, -144, -144, -144, 0, 0, -144, -144, 0, -144, -144, -144, -144, -144, 0, 0, 0, -144, 0, 0, 0, 0, 0, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, 0, -144, 0, 0, -144, -144, -144, -144, 0, 0,
        // State 77
        -135, -135, -135, 0, -135, -135, -135, -135, 0, 0, -135, -135, 0, -135, -135, -135, -135, -135, 0, 0, 0, -135, 0, 0, 0, 0, 0, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, 0, -135, -135, -135, -135, -135, -135, -135, -135, -135,
        // State 78
        0, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, 0, -86, -86, -86, 0, -86, -86, -86, -86, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        -142, -142, -142, 0, -142, -142, -142, -142, 0, 0, -142, -142, 0, -142, -142, -142, -142, -142, 0, 0, 0, -142, 0, 0, 0, 0, 0, -142, -142, -142, -142, -142, -142, -142, -142, -142, -142, 0, -142, -142, -142, -142, -142, -142, -142, -142, -142,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        -137, -137, -137, 0, -137, -137, -137, -137, 0, 0, -137, -137, 0, -137, -137, -137, -137, -137, 0, 0, 0, -137, 0, 0, 0, 0, 0, -137, -137, -137, -137, -137, -137, -137, -137, -137, -137, 0, -137, -137, -137, -137, -137, -137, -137, -137, -137,
        // State 82
        -162, -162, -162, 0, -162, -162, 0, -162, 0, 0, -162, -162, 0, -162, -162, -162, -162, -162, 0, 0, 0, -162, 0, 0, 0, 0, 0, -162, -162, -162, -162, -162, -162, -162, -162, -162, -162, 0, -162, 0, 0, -162, -162, -162, -162, 0, 0,
        // State 83
        -141, -141, -141, 0, -141, -141, -141, -141, 0, 0, -141, -141, 0, -141, -141, -141, -141, -141, 0, 0, 0, -141, 0, 0, 0, 0, 0, -141, -141, -141, -141, -141, -141, -141, -141, -141, -141, 0, -141, -141, -141, -141, -141, -141, -141, -141, -141,
        // State 84
        0, 0, 0, 0, -124, 0, 0, 0, 0, 0, -124, -124, 0, -124, -124, -124, 0, -124, 0, 0, 0, -124, 0, 0, 0, 0, 0, -124, -124, -124, -124, -124, -124, -124, 0, -124, -124, 0, -124, 0, 0, -124, -124, -124, 0, 0, 0,
        // State 85
        0, 0, 0, 0, -123, 0, 0, 0, 0, 0, -123, -123, 0, -123, -123, -123, 0, -123, 0, 0, 0, -123, 0, 0, 0, 0, 0, -123, -123, -123, -123, -123, -123, -123, 0, -123, -123, 0, -123, 0, 0, -123, -123, -123, 0, 0, 0,
        // State 86
        0, 0, 0, 0, -122, 0, 0, 0, 0, 0, -122, -122, 0, -122, -122, -122, 0, -122, 0, 0, 0, -122, 0, 0, 0, 0, 0, -122, -122, -122, -122, -122, -122, -122, 0, -122, -122, 0, -122, 0, 0, -122, -122, -122, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, -74, 0, 0, 0, -74, 0, -74, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, -74, -74, 0, 0, -74, -74, 0, 0, -74, 0, 0, 0, 0, -74, -74, -74, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0, -62, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, -62, -62, 0, 0, -62, 0, 0, 0, 0, -62, -62, -62, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, -69, 0, 0, 0, -69, 0, -69, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, -69, -69, 0, 0, -69, -69, 0, 0, -69, 0, 0, 0, 0, -69, -69, -69, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, -63, 0, 0, 0, -63, 0, -63, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, -63, -63, 0, 0, -63, -63, 0, 0, -63, 0, 0, 0, 0, -63, -63, -63, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, -72, 0, 0, 0, -72, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, -72, -72, 0, 0, -72, -72, 0, 0, -72, 0, 0, 0, 0, -72, -72, -72, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, -64, 0, 0, 0, -64, 0, -64, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, -64, -64, 0, 0, -64, -64, 0, 0, -64, 0, 0, 0, 0, -64, -64, -64, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -66, 0, 0, 0, -66, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, -66, -66, 0, 0, -66, -66, 0, 0, -66, 0, 0, 0, 0, -66, -66, -66, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, 0, -65, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, -65, -65, 0, 0, -65, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, -67, 0, 0, 0, -67, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, -67, -67, 0, 0, -67, -67, 0, 0, -67, 0, 0, 0, 0, -67, -67, -67, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, -73, 0, 0, 0, -73, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, -73, -73, 0, 0, -73, -73, 0, 0, -73, 0, 0, 0, 0, -73, -73, -73, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, -71, 0, 0, 0, -71, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, -71, -71, 0, 0, -71, -71, 0, 0, -71, 0, 0, 0, 0, -71, -71, -71, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, 0, -68, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, -68, -68, 0, 0, -68, 0, 0, 0, 0, -68, -68, -68, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, 0, 0, 0, -70, 0, -70, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, -70, -70, 0, 0, -70, -70, 0, 0, -70, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0,
        // State 100
        -61, -61, 0, 0, -61, -61, 0, -61, 0, 0, -61, -61, 0, -61, -61, -61, -61, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, 0, -61, 0, 0, -61, -61, -61, -61, 0, 0,
        // State 101
        -158, -158, 0, 0, -158, -158, 0, -158, 0, 0, -158, -158, 0, -158, -158, -158, -158, -158, 0, 0, 0, -158, 0, 0, 0, 0, 0, -158, -158, -158, -158, -158, -158, -158, -158, -158, -158, 0, -158, 0, 0, -158, -158, -158, -158, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, -170, 0, -170, -170, -170, 0, -170, 0, 0, 0, -170, 0, 0, 0, 0, 0, -170, -170, -170, 0, -170, -170, -170, -170, -170, -170, 0, -170, 0, 0, -170, -170, -170, -170, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, -169, 0, -169, -169, -169, 0, -169, 0, 0, 0, -169, 0, 0, 0, 0, 0, -169, -169, -169, 0, -169, -169, -169, -169, -169, -169, 0, -169, 0, 0, -169, -169, -169, -169, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, -168, 0, -168, -168, -168, 0, -168, 0, 0, 0, -168, 0, 0, 0, 0, 0, -168, -168, -168, 0, -168, -168, -168, -168, -168, -168, 0, -168, 0, 0, -168, -168, -168, -168, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        -130, -130, 0, 0, -130, -130, 0, -130, 0, 0, -130, -130, 0, -130, -130, -130, -130, -130, 0, 0, 0, -130, 0, 0, 0, 0, 0, -130, -130, -130, -130, -130, -130, -130, -130, -130, -130, 0, -130, 0, 0, -130, -130, -130, -130, -130, -130,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, -134, 0, 0, 0, -134, 0, -134, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, -134, 0, -134, 0, -134, 0, 0, -134, 0, 0, 0, 0, -134, 0, -134, 0, 0, 0,
        // State 110
        -140, -140, -140, 0, -140, -140, -140, -140, 0, 0, -140, -140, 0, -140, -140, -140, -140, -140, 0, 0, 0, -140, 0, 0, 0, 0, 0, -140, -140, -140, -140, -140, -140, -140, -140, -140, -140, 0, -140, -140, -140, -140, -140, -140, -140, -140, -140,
        // State 111
        -139, -139, -139, 0, -139, -139, -139, -139, 0, 0, -139, -139, 0, -139, -139, -139, -139, -139, 0, 0, 0, -139, 0, 0, 0, 0, 0, -139, -139, -139, -139, -139, -139, -139, -139, -139, -139, 0, -139, -139, -139, -139, -139, -139, -139, -139, -139,
        // State 112
        -145, -145, 0, 0, -145, -145, 0, -145, 0, 0, -145, -145, 0, -145, -145, -145, -145, -145, 0, 0, 0, -145, 0, 0, 0, 0, 0, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, 0, -145, 0, 0, -145, -145, -145, -145, -77, -77,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        -92, -92, -92, 0, -92, -92, -92, -92, 0, 0, -92, -92, 0, -92, -92, -92, -92, -92, 0, 0, 0, -92, 0, 0, 0, 0, 0, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, 0, 0, -92, -92, -92, -92, -92, -92,
        // State 115
        -156, -156, 0, 0, -156, -156, 0, -156, 0, 0, -156, -156, 0, -156, -156, -156, -156, -156, 0, 0, 0, -156, 0, 0, 0, 0, 0, -156, -156, -156, -156, -156, -156, -156, -156, -156, -156, 0, -156, 0, 0, -156, -156, -156, -156, 0, 0,
        // State 116
        -47, -47, 0, 0, 0, 0, 0, 0, 0, 0, -47, -47, 0, -47, -47, -47, 0, -47, 0, 0, 0, -47, 0, 0, 0, 0, 0, -47, -47, -47, 0, -47, -47, -47, 0, -47, -47, 0, -47, 0, 0, -47, -47, -47, 0, 0, 0,
        // State 117
        -44, -44, 0, 0, 0, 0, 0, 0, 0, 0, -44, -44, 0, -44, -44, -44, 0, -44, 0, 0, 0, -44, 0, 0, 0, 0, 0, -44, -44, -44, 0, -44, -44, -44, 0, -44, -44, 0, -44, 0, 0, -44, -44, -44, 0, 0, 0,
        // State 118
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, 0, -43, -43, -43, 0, -43, 0, 0, 0, -43, 0, 0, 0, 0, 0, -43, -43, -43, 0, -43, -43, -43, 0, -43, -43, 0, -43, 0, 0, -43, -43, -43, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 141, 0, -32, 0, 0, 0, -32, -32, 0, 0, 0, -32, 0, -32, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, -32, -32, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, -32, 0, -32, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, -125, 0, 0, 0, 0, 0, -125, -125, 0, -125, -125, -125, 0, -125, 0, 0, 0, -125, 0, 0, 0, 0, 0, -125, -125, -125, -125, -125, -125, -125, 0, -125, -125, 0, -125, 0, 0, -125, -125, -125, 0, 0, 0,
        // State 124
        -55, -55, 0, 0, -55, -55, 0, -55, 0, 0, -55, -55, 0, -55, -55, -55, -55, -55, 0, 0, 0, -55, 0, 0, 0, 0, 0, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, 0, -55, 0, 0, -55, -55, -55, -55, 0, 0,
        // State 125
        -145, -145, 0, 0, -145, -145, -145, -145, 0, 0, -145, -145, 0, -145, -145, -145, -145, -145, 0, 0, 0, -145, 0, 0, 0, 0, 0, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, 0, -145, 0, 0, -145, -145, -145, -145, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -171, -171, 0, -171, -171, -171, 0, -171, 0, 0, 0, -171, 0, 0, 0, 0, 0, -171, -171, -171, 0, -171, -171, -171, -171, -171, -171, 0, -171, 0, 0, -171, -171, -171, -171, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, -132, 0, 0, 0, -132, 0, -132, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, -132, 0, -132, 0, -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, -132, 0, 0, 0,
        // State 128
        -77, -77, 0, 0, -77, -77, 0, -77, 0, 0, -77, -77, 0, -77, -77, -77, -77, -77, 0, 0, 0, -77, 0, 0, 0, 0, 0, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, 0, -77, 0, 0, -77, -77, -77, -77, -77, -77,
        // State 129
        -147, -147, 0, 0, -147, -147, 0, -147, 0, 0, -147, -147, 0, -147, -147, -147, -147, -147, 0, 0, 0, -147, 0, 0, 0, 0, 0, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, 0, -147, 0, 0, -147, -147, -147, -147, -79, -79,
        // State 130
        -49, -49, 0, 0, -49, -49, -49, -49, 0, 0, -49, -49, 0, -49, -49, -49, -49, -49, 0, 0, 0, -49, 0, 0, 0, 0, 0, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, 0, -49, 0, 0, -49, -49, -49, -49, -49, -49,
        // State 131
        -50, -50, 0, 0, -50, -50, -50, -50, 0, 0, -50, -50, 0, -50, -50, -50, -50, -50, 0, 0, 0, -50, 0, 0, 0, 0, 0, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 0, -50, 0, 0, -50, -50, -50, -50, -50, -50,
        // State 132
        -48, -48, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, 0, -48, -48, -48, 0, -48, 0, 0, 0, -48, 0, 0, 0, 0, 0, -48, -48, -48, 0, -48, -48, -48, 0, -48, -48, 0, -48, 0, 0, -48, -48, -48, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        -127, -127, 0, 0, -127, -127, 0, -127, 0, 0, -127, -127, 0, -127, -127, -127, -127, -127, 0, 0, 0, -127, 0, 0, 0, 0, 0, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, 0, -127, 0, 0, -127, -127, -127, -127, -127, -127,
        // State 139
        0, 0, 0, 0, 155, 0, -34, 0, 0, 0, -34, -34, 0, 0, 0, -34, 0, -34, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, -34, -34, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, -34, 0, -34, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, -31, 0, -31, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, -31, 0, -31, 0, 0, 0,
        // State 141
        -152, -152, 0, 0, -152, -152, 0, -152, 0, 0, -152, -152, 0, -152, -152, -152, -152, -152, 0, 0, 0, -152, 0, 0, 0, 0, 0, -152, -152, -152, -152, -152, -152, -152, -152, -152, -152, 0, -152, 0, 0, -152, -152, -152, -152, 0, 0,
        // State 142
        -126, -126, 0, 0, -126, -126, 0, -126, 0, 0, -126, -126, 0, -126, -126, -126, -126, -126, 0, 0, 0, -126, 0, 0, 0, 0, 0, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, 0, -126, 0, 0, -126, -126, -126, -126, -126, -126,
        // State 143
        -60, -60, 0, 0, -60, -60, 0, -60, 0, 0, -60, -60, 0, -60, -60, -60, -60, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, 0, -60, 0, 0, -60, -60, -60, -60, 0, 0,
        // State 144
        0, 0, 0, 0, 160, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 0, 0, -106, -106, -106, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        -143, -143, -143, 44, -143, -143, 0, 0, 0, 0, -143, -143, 0, -143, -143, -143, 0, -143, 0, 0, 0, -143, 0, 0, 0, 0, 0, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, 0, -143, -143, 0, -143, -143, -143, -143, -143, -143,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        -147, -147, 0, 0, -147, -147, -147, -147, 0, 0, -147, -147, 0, -147, -147, -147, -147, -147, 0, 0, 0, -147, 0, 0, 0, 0, 0, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, 0, -147, 0, 0, -147, -147, -147, -147, 0, 0,
        // State 150
        -79, -79, 0, 0, -79, -79, 0, -79, 0, 0, -79, -79, 0, -79, -79, -79, -79, -79, 0, 0, 0, -79, 0, 0, 0, 0, 0, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, 0, 0, -79, -79, -79, -79, -79, -79,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, -33, 0, 0, 0, -33, -33, 0, 0, 0, -33, 0, -33, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, -33, -33, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, -33, 0, -33, 0, 0, 0,
        // State 155
        -154, -154, 0, 0, -154, -154, 0, -154, 0, 0, -154, -154, 0, -154, -154, -154, -154, -154, 0, 0, 0, -154, 0, 0, 0, 0, 0, -154, -154, -154, -154, -154, -154, -154, -154, -154, -154, 0, -154, 0, 0, -154, -154, -154, -154, 0, 0,
        // State 156
        0, 0, 0, 0, 163, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 157
        0, 0, 0, 0, -108, -108, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 159
        0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, -105, -105, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        -59, -59, 0, 0, -59, -59, 0, -59, 0, 0, -59, -59, 0, -59, -59, -59, -59, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, 0, -59, 0, 0, -59, -59, -59, -59, 0, 0,
        // State 162
        0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, -107, -107, -107, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, -112, -112, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, -104, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, -100, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, -103, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, -101, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, -102, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, -99, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        -149, -149, 0, 0, -149, -149, 0, -149, 0, 0, -149, -149, 0, -149, -149, -149, -149, -149, 0, 0, 0, -149, 0, 0, 0, 0, 0, -149, -149, -149, -149, -149, -149, -149, -149, -149, -149, 0, -149, 0, 0, -149, -149, -149, -149, 0, 0,
        // State 175
        -56, -56, 0, 0, -56, -56, 0, -56, 0, 0, -56, -56, 0, -56, -56, -56, -56, -56, 0, 0, 0, -56, 0, 0, 0, 0, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, 0, -56, 0, 0, -56, -56, -56, -56, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 189, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, -96, -96, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        -76, -76, 0, 0, -76, -76, 0, -76, 0, 0, -76, -76, 0, -76, -76, -76, -76, -76, 0, 0, 0, -76, 0, 0, 0, 0, 0, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, 0, -76, 0, 0, -76, -76, -76, -76, 0, 0,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 193, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 187
        0, 0, 0, 0, -98, -98, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, 0, -17, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, -17, 0, -17, -17, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0,
        // State 189
        0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        -75, -75, 0, 0, -75, -75, 0, -75, 0, 0, -75, -75, 0, -75, -75, -75, -75, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, 0, -75, 0, 0, -75, -75, -75, -75, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, -18, 0, 0, 0, -18, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, -18, 0, -18, -18, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0,
        // State 193
        0, 0, 0, 0, -97, -97, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        0, 0, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 47 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -121,
        // State 5
        0,
        // State 6
        0,
        // State 7
        -167,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -146,
        // State 11
        -157,
        // State 12
        -42,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        -120,
        // State 17
        -166,
        // State 18
        -41,
        // State 19
        0,
        // State 20
        0,
        // State 21
        -146,
        // State 22
        0,
        // State 23
        -128,
        // State 24
        -78,
        // State 25
        0,
        // State 26
        -148,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        -153,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        -146,
        // State 37
        0,
        // State 38
        -148,
        // State 39
        -80,
        // State 40
        -155,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        -57,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        -161,
        // State 58
        -160,
        // State 59
        -131,
        // State 60
        -174,
        // State 61
        -81,
        // State 62
        -61,
        // State 63
        0,
        // State 64
        -151,
        // State 65
        -159,
        // State 66
        -58,
        // State 67
        -129,
        // State 68
        -140,
        // State 69
        -143,
        // State 70
        0,
        // State 71
        0,
        // State 72
        -138,
        // State 73
        -136,
        // State 74
        -139,
        // State 75
        0,
        // State 76
        -144,
        // State 77
        -135,
        // State 78
        0,
        // State 79
        -142,
        // State 80
        0,
        // State 81
        -137,
        // State 82
        -162,
        // State 83
        -141,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        -61,
        // State 101
        -158,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        -130,
        // State 109
        0,
        // State 110
        -140,
        // State 111
        -139,
        // State 112
        -145,
        // State 113
        0,
        // State 114
        -92,
        // State 115
        -156,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        -55,
        // State 125
        -145,
        // State 126
        0,
        // State 127
        0,
        // State 128
        -77,
        // State 129
        -147,
        // State 130
        -49,
        // State 131
        -50,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        -127,
        // State 139
        0,
        // State 140
        0,
        // State 141
        -152,
        // State 142
        -126,
        // State 143
        -60,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        -147,
        // State 150
        -79,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        -154,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        -59,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        -149,
        // State 175
        -56,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        -76,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        -75,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            1 => 1,
            7 => 41,
            10 => 52,
            15 => 2,
            18 => 29,
            20 => 3,
            21 => match state {
                1 => 16,
                _ => 4,
            },
            22 => match state {
                27 | 35 => 132,
                _ => 116,
            },
            24 => match state {
                18 => 35,
                _ => 27,
            },
            25 => match state {
                10 => 112,
                11 => 115,
                24 => 128,
                26 => 129,
                30 => 141,
                38 => 149,
                39 => 150,
                40 => 155,
                45 => 175,
                _ => 125,
            },
            28 => 57,
            29 => 87,
            30 => 20,
            31 => 58,
            32 => 59,
            33 => match state {
                46 => 51,
                0 => 60,
                15 | 25 => 121,
                37 => 148,
                54 => 194,
                _ => 119,
            },
            35 => 5,
            37 => 182,
            39 => match state {
                10 => 26,
                24 => 39,
                _ => 38,
            },
            40 => match state {
                32 => 147,
                _ => 133,
            },
            41 => 164,
            42 => 165,
            43 => match state {
                15 => 122,
                _ => 166,
            },
            44 => match state {
                41 => 156,
                _ => 144,
            },
            46 => match state {
                50 => 180,
                52 => 186,
                _ => 167,
            },
            49 => 6,
            50 => 61,
            51 => match state {
                19 | 33 => 123,
                _ => 84,
            },
            52 => match state {
                16 => 33,
                _ => 19,
            },
            53 => match state {
                6 => 100,
                9 => 108,
                44 => 174,
                _ => 62,
            },
            54 => match state {
                2 => 17,
                _ => 7,
            },
            55 => match state {
                9 => 23,
                _ => 8,
            },
            56 => match state {
                9 => 109,
                _ => 63,
            },
            57 => 9,
            58 => match state {
                6 | 14 | 29 => 21,
                9 => 24,
                20 => 36,
                42 => 45,
                _ => 10,
            },
            59 => match state {
                14 => 120,
                29 => 139,
                _ => 64,
            },
            60 => 65,
            61 => match state {
                55 => 195,
                _ => 176,
            },
            62 => match state {
                20 => 124,
                _ => 66,
            },
            63 => match state {
                6 => 101,
                _ => 67,
            },
            64 => 11,
            65 => match state {
                47 | 55 => 177,
                48 => 179,
                53 => 191,
                56 => 197,
                _ => 134,
            },
            66 => match state {
                3 => 18,
                _ => 12,
            },
            67 => match state {
                22 | 34 => 126,
                _ => 102,
            },
            68 => match state {
                17 => 34,
                _ => 22,
            },
            69 => 105,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"AMPERSAND"###,
        r###"AND"###,
        r###"CARET"###,
        r###"COLON"###,
        r###"COMMA"###,
        r###"C_BRACE"###,
        r###"C_BRACKET"###,
        r###"C_PAREN"###,
        r###"DOES_NOT_CONTAIN"###,
        r###"DOT"###,
        r###"DOTTED_IDENTIFIER"###,
        r###"DOUBLE_QUOTED_VALUE"###,
        r###"EQ"###,
        r###"EXCLAMATION"###,
        r###"EXPAND"###,
        r###"FALSE"###,
        r###"FILTER"###,
        r###"FLOAT"###,
        r###"FUZZY_LIKE_THIS"###,
        r###"GT"###,
        r###"GTE"###,
        r###"IDENTIFIER"###,
        r###"LT"###,
        r###"LTE"###,
        r###"MATCHES"###,
        r###"MORE_LIKE_THIS"###,
        r###"NE"###,
        r###"NOT"###,
        r###"NULL"###,
        r###"NUMBER"###,
        r###"OR"###,
        r###"O_BRACE"###,
        r###"O_BRACKET"###,
        r###"O_PAREN"###,
        r###"PERCENT"###,
        r###"QUOTED_IDENTIFIER"###,
        r###"QUOTED_VALUE"###,
        r###"REGEX"###,
        r###"SUBSELECT"###,
        r###"TILDE"###,
        r###"TO"###,
        r###"TRUE"###,
        r###"UNPARSED_ARRAY"###,
        r###"UNQUOTED_VALUE"###,
        r###"WITH"###,
        r###"WITHIN"###,
        r###"WITHIN_ORDER"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: '__2,
        'input: '__3,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        source_index: Option<&'__1 PgRelation>,
        used_fields: &'__2 mut HashSet<&'input str>,
        fieldname_stack: &'__3 mut Vec<&'input str>,
        operator_stack: &'__4 mut Vec<ComparisonOpcode>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1, '__2, '__3, '__4> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Box<Expr<'input>>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 47 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.source_index,
                self.used_fields,
                self.fieldname_stack,
                self.operator_stack,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(18, _) if true => Some(0),
            Token(8, _) if true => Some(1),
            Token(21, _) if true => Some(2),
            Token(32, _) if true => Some(3),
            Token(19, _) if true => Some(4),
            Token(46, _) if true => Some(5),
            Token(44, _) if true => Some(6),
            Token(31, _) if true => Some(7),
            Token(38, _) if true => Some(8),
            Token(20, _) if true => Some(9),
            Token(4, _) if true => Some(10),
            Token(0, _) if true => Some(11),
            Token(39, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(9, _) if true => Some(15),
            Token(23, _) if true => Some(16),
            Token(27, _) if true => Some(17),
            Token(34, _) if true => Some(18),
            Token(41, _) if true => Some(19),
            Token(42, _) if true => Some(20),
            Token(5, _) if true => Some(21),
            Token(36, _) if true => Some(22),
            Token(37, _) if true => Some(23),
            Token(40, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(10, _) if true => Some(27),
            Token(11, _) if true => Some(28),
            Token(28, _) if true => Some(29),
            Token(12, _) if true => Some(30),
            Token(45, _) if true => Some(31),
            Token(43, _) if true => Some(32),
            Token(30, _) if true => Some(33),
            Token(17, _) if true => Some(34),
            Token(6, _) if true => Some(35),
            Token(1, _) if true => Some(36),
            Token(35, _) if true => Some(37),
            Token(24, _) if true => Some(38),
            Token(15, _) if true => Some(39),
            Token(7, _) if true => Some(40),
            Token(13, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            Token(2, _) if true => Some(43),
            Token(14, _) if true => Some(44),
            Token(25, _) if true => Some(45),
            Token(26, _) if true => Some(46),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 => match __token {
                Token(18, __tok0) | Token(8, __tok0) | Token(21, __tok0) | Token(32, __tok0) | Token(19, __tok0) | Token(46, __tok0) | Token(44, __tok0) | Token(31, __tok0) | Token(38, __tok0) | Token(20, __tok0) | Token(4, __tok0) | Token(0, __tok0) | Token(39, __tok0) | Token(16, __tok0) | Token(22, __tok0) | Token(9, __tok0) | Token(23, __tok0) | Token(27, __tok0) | Token(34, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(5, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(40, __tok0) | Token(33, __tok0) | Token(29, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(28, __tok0) | Token(12, __tok0) | Token(45, __tok0) | Token(43, __tok0) | Token(30, __tok0) | Token(17, __tok0) | Token(6, __tok0) | Token(1, __tok0) | Token(35, __tok0) | Token(24, __tok0) | Token(15, __tok0) | Token(7, __tok0) | Token(13, __tok0) | Token(3, __tok0) | Token(2, __tok0) | Token(14, __tok0) | Token(25, __tok0) | Token(26, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2, '__3, '__4>>
    where
        'input: '__2,
        'input: '__3,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 9,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 12,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 20,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 21,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 23,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 28,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 31,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 31,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 32,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 37,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 38,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 40,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 41,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 44,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 45,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 47,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 48,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 50,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 52,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 56,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 59,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 60,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 62,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 63,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 66,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 68,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            173 => __state_machine::SimulatedReduce::Accept,
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ExprParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl ExprParser {
        pub fn new() -> ExprParser {
            let __builder = super::__intern_token::new_builder();
            ExprParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            source_index: Option<&PgRelation>,
            used_fields: &mut HashSet<&'input str>,
            fieldname_stack: &mut Vec<&'input str>,
            operator_stack: &mut Vec<ComparisonOpcode>,
            input: &'input str,
        ) -> Result<Box<Expr<'input>>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    source_index,
                    used_fields,
                    fieldname_stack,
                    operator_stack,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    where
        'input: '__2,
        'input: '__3,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Box<Expr<'input>>,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                // __Expr = Expr => ActionFn(0);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
                return Some(Ok(__nt));
            }
            174 => {
                __reduce174(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (String, Vec<String>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, bool), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<Expr<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ComparisonOpcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, HashMap<String, Vec<String>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IndexLink, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Opcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityPart, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityTerm, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, QualifiedIndex, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<ProximityTerm>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(String, Vec<String>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Opcode>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ProximityPart>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Term<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, bool, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<f32>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, f32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u8, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+) = AndExpression, OrOp+ => ActionFn(137);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action137::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = AndExpression, OrOp+ => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action152::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = (<AndExpression> OrOp+)+, AndExpression, OrOp+ => ActionFn(153);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action153::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA) = FieldName, COMMA => ActionFn(100);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action100::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* = (<FieldName> COMMA)+ => ActionFn(99);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = FieldName, COMMA => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action154::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = (<FieldName> COMMA)+, FieldName, COMMA => ActionFn(155);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action155::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA) = JsonProperty, COMMA => ActionFn(113);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action113::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* =  => ActionFn(111);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* = (<JsonProperty> COMMA)+ => ActionFn(112);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = JsonProperty, COMMA => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = (<JsonProperty> COMMA)+, JsonProperty, COMMA => ActionFn(159);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action159::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA) = JsonValue, COMMA => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action108::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* =  => ActionFn(106);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* = (<JsonValue> COMMA)+ => ActionFn(107);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = JsonValue, COMMA => ActionFn(162);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action162::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = (<JsonValue> COMMA)+, JsonValue, COMMA => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action163::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA) = NamedFieldList, COMMA => ActionFn(103);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action103::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* =  => ActionFn(101);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action101::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* = (<NamedFieldList> COMMA)+ => ActionFn(102);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = NamedFieldList, COMMA => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action166::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = (<NamedFieldList> COMMA)+, NamedFieldList, COMMA => ActionFn(167);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action167::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+) = ProximityExpression, WithOp+ => ActionFn(127);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action127::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = ProximityExpression, WithOp+ => ActionFn(170);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action170::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = (<ProximityExpression> WithOp+)+, ProximityExpression, WithOp+ => ActionFn(171);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action171::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr, COMMA => ActionFn(172);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action172::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr => ActionFn(173);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action173::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* = (<StringExpr> COMMA?)+ => ActionFn(117);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr, COMMA => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action174::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr => ActionFn(175);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action175::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr, COMMA => ActionFn(176);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action176::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr => ActionFn(177);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action177::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression => ActionFn(180);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action180::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression, AndOp+ => ActionFn(181);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action181::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression => ActionFn(182);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action182::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression, AndOp+ => ActionFn(183);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action183::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action184::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression, AndOp+ => ActionFn(185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action185::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = (<WithExpression> AndOp*)+, WithExpression => ActionFn(8);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action8::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = WithExpression => ActionFn(9);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AND => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AMPERSAND => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* = AndOp+ => ActionFn(134);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp => ActionFn(140);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action140::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp+, AndOp => ActionFn(141);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action141::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, FLOAT => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action65::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, NUMBER => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? = Boost => ActionFn(121);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? = COMMA => ActionFn(119);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action119::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? =  => ActionFn(120);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action120::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, Term => ActionFn(29);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action29::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String, Boost => ActionFn(186);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action186::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (6, 28)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String => ActionFn(187);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action187::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = Term => ActionFn(31);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, O_PAREN, Expr, C_PAREN => ActionFn(32);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action32::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = O_PAREN, JsonObject, C_PAREN => ActionFn(33);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action33::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = ParentheticalGroup => ActionFn(34);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = COLON => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = EQ => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GT => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LT => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GTE => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LTE => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = NE => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = DOES_NOT_CONTAIN => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = REGEX => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MORE_LIKE_THIS => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = FUZZY_LIKE_THIS => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action54::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MATCHES => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOperator = ComparisonOp => ActionFn(43);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, Filter, C_PAREN => ActionFn(202);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action202::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (8, 31)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, C_PAREN => ActionFn(203);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action203::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (7, 31)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Boost => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action188::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String => ActionFn(189);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action189::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy, Boost => ActionFn(190);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action190::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy => ActionFn(191);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action191::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = OrExpression => ActionFn(3);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = NamedFieldList => ActionFn(168);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action168::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = (<NamedFieldList> COMMA)+, NamedFieldList => ActionFn(169);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action169::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = IDENTIFIER => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = DOTTED_IDENTIFIER => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = QUOTED_IDENTIFIER => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = FieldName => ActionFn(156);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action156::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = (<FieldName> COMMA)+, FieldName => ActionFn(157);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action157::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter = FILTER, O_PAREN, Expr, C_PAREN => ActionFn(82);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action82::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (4, 37)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? = Filter => ActionFn(114);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action114::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action115::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Fuzzy = TILDE => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName => ActionFn(78);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant28(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action78::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (6, 40)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = IDENTIFIER, COLON, O_PAREN, UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName, C_PAREN => ActionFn(79);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant28(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action79::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (10, 40)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, JsonValue, C_BRACKET => ActionFn(208);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action208::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, C_BRACKET => ActionFn(209);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action209::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, JsonValue, C_BRACKET => ActionFn(210);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action210::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 41)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, C_BRACKET => ActionFn(211);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action211::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = TRUE => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action89::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FALSE => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NULL => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action91::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NUMBER => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FLOAT => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = DOUBLE_QUOTED_VALUE => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, JsonProperty, C_BRACE => ActionFn(204);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action204::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, C_BRACE => ActionFn(205);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action205::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, JsonProperty, C_BRACE => ActionFn(206);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action206::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 43)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, C_BRACE => ActionFn(207);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action207::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty = DOUBLE_QUOTED_VALUE, COLON, JsonValue => ActionFn(84);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action84::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? = JsonProperty => ActionFn(109);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action109::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action110::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 45)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonObject => ActionFn(85);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonArray => ActionFn(86);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonLiteral => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? = JsonValue => ActionFn(104);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action105::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 47)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NamedFieldList = FieldName, EQ, O_BRACKET, FieldNameList, C_BRACKET => ActionFn(96);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action96::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 48)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = NOT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = EXCLAMATION => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = (<AndExpression> OrOp+)+, AndExpression => ActionFn(4);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action4::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 50)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = AndExpression => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = OR => ActionFn(6);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = COMMA => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp => ActionFn(138);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action138::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp+, OrOp => ActionFn(139);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action139::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 52)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_PAREN, Expr, C_PAREN => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action35::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_BRACE, Expr, C_BRACE => ActionFn(36);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action36::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = ProximityPart+, ProximityGroup => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action16::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = UnaryExpression => ActionFn(17);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action17::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ParentheticalGroup => ActionFn(19);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action19::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ExpandedPhraseStringExpr => ActionFn(20);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart = ProximityGroup, WithinOperator, NUMBER => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action18::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 56)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart => ActionFn(123);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart+, ProximityPart => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action124::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = NUMBER => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FLOAT => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = TRUE => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FALSE => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = IDENTIFIER => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOTTED_IDENTIFIER => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = UNQUOTED_VALUE => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = QUOTED_VALUE => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action75::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOUBLE_QUOTED_VALUE => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = NULL => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Boost => ActionFn(192);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action192::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String => ActionFn(193);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action193::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy, Boost => ActionFn(194);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action194::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 59)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy => ActionFn(195);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action195::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Subselect = SUBSELECT, LT, IndexLink, GT, ParentheticalGroup => ActionFn(80);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action80::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (5, 60)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TableIndexName = UntrackedFieldName => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = StringExpr => ActionFn(56);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET, Boost => ActionFn(196);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action196::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET => ActionFn(197);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action197::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET, Boost => ActionFn(198);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action198::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 62)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET => ActionFn(199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action199::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray, Boost => ActionFn(200);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action200::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray => ActionFn(201);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action201::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = NotOp, UnaryExpression => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action23::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Subselect => ActionFn(24);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Expand => ActionFn(25);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Comparison => ActionFn(26);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnparsedArray = UNPARSED_ARRAY => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = IDENTIFIER => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = DOTTED_IDENTIFIER => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action41::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = QUOTED_IDENTIFIER => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = (<ProximityExpression> WithOp+)+, ProximityExpression => ActionFn(12);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action12::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = ProximityExpression => ActionFn(13);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = WITH => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = PERCENT => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp => ActionFn(128);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action128::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp+, WithOp => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action129::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 68)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN => ActionFn(21);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action21::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN_ORDER => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __FieldList = FieldList => ActionFn(2);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __IndexLink = IndexLink => ActionFn(1);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 72)
    }
}
pub use self::__parse__Expr::ExprParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__FieldList {

    use std::str::FromStr;
    use std::collections::HashSet;
    use crate::zql::ast::*;
    use std::collections::HashMap;
    use pgrx::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Box<Expr<'input>>),
        Variant2(alloc::vec::Vec<Box<Expr<'input>>>),
        Variant3(alloc::vec::Vec<&'input str>),
        Variant4(String),
        Variant5(alloc::vec::Vec<String>),
        Variant6((String, Vec<String>)),
        Variant7(alloc::vec::Vec<(String, Vec<String>)>),
        Variant8(Term<'input>),
        Variant9(alloc::vec::Vec<Term<'input>>),
        Variant10(Opcode),
        Variant11(alloc::vec::Vec<Opcode>),
        Variant12(f32),
        Variant13(core::option::Option<f32>),
        Variant14(core::option::Option<&'input str>),
        Variant15(ComparisonOpcode),
        Variant16(Expr<'input>),
        Variant17(ProximityTerm),
        Variant18(HashMap<String, Vec<String>>),
        Variant19(Vec<String>),
        Variant20(core::option::Option<Box<Expr<'input>>>),
        Variant21(u8),
        Variant22(IndexLink),
        Variant23(core::option::Option<String>),
        Variant24(Vec<ProximityTerm>),
        Variant25(ProximityPart),
        Variant26(alloc::vec::Vec<ProximityPart>),
        Variant27((&'input str, bool)),
        Variant28(QualifiedIndex),
        Variant29(bool),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, -85, 0, -85, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, -84, 0, -84, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, -86, 0, -86, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 18, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 20, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 47 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -175,
        // State 5
        0,
        // State 6
        -82,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -83,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        -117,
        // State 19
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            4 => 3,
            13 => 1,
            34 => 4,
            35 => match state {
                2 => 14,
                3 => 16,
                _ => 5,
            },
            36 => 15,
            48 => match state {
                1 => 10,
                _ => 6,
            },
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"AMPERSAND"###,
        r###"AND"###,
        r###"CARET"###,
        r###"COLON"###,
        r###"COMMA"###,
        r###"C_BRACE"###,
        r###"C_BRACKET"###,
        r###"C_PAREN"###,
        r###"DOES_NOT_CONTAIN"###,
        r###"DOT"###,
        r###"DOTTED_IDENTIFIER"###,
        r###"DOUBLE_QUOTED_VALUE"###,
        r###"EQ"###,
        r###"EXCLAMATION"###,
        r###"EXPAND"###,
        r###"FALSE"###,
        r###"FILTER"###,
        r###"FLOAT"###,
        r###"FUZZY_LIKE_THIS"###,
        r###"GT"###,
        r###"GTE"###,
        r###"IDENTIFIER"###,
        r###"LT"###,
        r###"LTE"###,
        r###"MATCHES"###,
        r###"MORE_LIKE_THIS"###,
        r###"NE"###,
        r###"NOT"###,
        r###"NULL"###,
        r###"NUMBER"###,
        r###"OR"###,
        r###"O_BRACE"###,
        r###"O_BRACKET"###,
        r###"O_PAREN"###,
        r###"PERCENT"###,
        r###"QUOTED_IDENTIFIER"###,
        r###"QUOTED_VALUE"###,
        r###"REGEX"###,
        r###"SUBSELECT"###,
        r###"TILDE"###,
        r###"TO"###,
        r###"TRUE"###,
        r###"UNPARSED_ARRAY"###,
        r###"UNQUOTED_VALUE"###,
        r###"WITH"###,
        r###"WITHIN"###,
        r###"WITHIN_ORDER"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: '__2,
        'input: '__3,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        source_index: Option<&'__1 PgRelation>,
        used_fields: &'__2 mut HashSet<&'input str>,
        fieldname_stack: &'__3 mut Vec<&'input str>,
        operator_stack: &'__4 mut Vec<ComparisonOpcode>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1, '__2, '__3, '__4> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = HashMap<String, Vec<String>>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 47 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.source_index,
                self.used_fields,
                self.fieldname_stack,
                self.operator_stack,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(18, _) if true => Some(0),
            Token(8, _) if true => Some(1),
            Token(21, _) if true => Some(2),
            Token(32, _) if true => Some(3),
            Token(19, _) if true => Some(4),
            Token(46, _) if true => Some(5),
            Token(44, _) if true => Some(6),
            Token(31, _) if true => Some(7),
            Token(38, _) if true => Some(8),
            Token(20, _) if true => Some(9),
            Token(4, _) if true => Some(10),
            Token(0, _) if true => Some(11),
            Token(39, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(9, _) if true => Some(15),
            Token(23, _) if true => Some(16),
            Token(27, _) if true => Some(17),
            Token(34, _) if true => Some(18),
            Token(41, _) if true => Some(19),
            Token(42, _) if true => Some(20),
            Token(5, _) if true => Some(21),
            Token(36, _) if true => Some(22),
            Token(37, _) if true => Some(23),
            Token(40, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(10, _) if true => Some(27),
            Token(11, _) if true => Some(28),
            Token(28, _) if true => Some(29),
            Token(12, _) if true => Some(30),
            Token(45, _) if true => Some(31),
            Token(43, _) if true => Some(32),
            Token(30, _) if true => Some(33),
            Token(17, _) if true => Some(34),
            Token(6, _) if true => Some(35),
            Token(1, _) if true => Some(36),
            Token(35, _) if true => Some(37),
            Token(24, _) if true => Some(38),
            Token(15, _) if true => Some(39),
            Token(7, _) if true => Some(40),
            Token(13, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            Token(2, _) if true => Some(43),
            Token(14, _) if true => Some(44),
            Token(25, _) if true => Some(45),
            Token(26, _) if true => Some(46),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 => match __token {
                Token(18, __tok0) | Token(8, __tok0) | Token(21, __tok0) | Token(32, __tok0) | Token(19, __tok0) | Token(46, __tok0) | Token(44, __tok0) | Token(31, __tok0) | Token(38, __tok0) | Token(20, __tok0) | Token(4, __tok0) | Token(0, __tok0) | Token(39, __tok0) | Token(16, __tok0) | Token(22, __tok0) | Token(9, __tok0) | Token(23, __tok0) | Token(27, __tok0) | Token(34, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(5, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(40, __tok0) | Token(33, __tok0) | Token(29, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(28, __tok0) | Token(12, __tok0) | Token(45, __tok0) | Token(43, __tok0) | Token(30, __tok0) | Token(17, __tok0) | Token(6, __tok0) | Token(1, __tok0) | Token(35, __tok0) | Token(24, __tok0) | Token(15, __tok0) | Token(7, __tok0) | Token(13, __tok0) | Token(3, __tok0) | Token(2, __tok0) | Token(14, __tok0) | Token(25, __tok0) | Token(26, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2, '__3, '__4>>
    where
        'input: '__2,
        'input: '__3,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 9,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 12,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 20,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 21,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 23,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 28,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 31,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 31,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 32,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 37,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 38,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 40,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 41,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 44,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 45,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 47,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 48,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 50,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 52,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 56,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 59,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 60,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 62,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 63,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 66,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 68,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            174 => __state_machine::SimulatedReduce::Accept,
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct FieldListParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl FieldListParser {
        pub fn new() -> FieldListParser {
            let __builder = super::__intern_token::new_builder();
            FieldListParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            source_index: Option<&PgRelation>,
            used_fields: &mut HashSet<&'input str>,
            fieldname_stack: &mut Vec<&'input str>,
            operator_stack: &mut Vec<ComparisonOpcode>,
            input: &'input str,
        ) -> Result<HashMap<String, Vec<String>>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    source_index,
                    used_fields,
                    fieldname_stack,
                    operator_stack,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    where
        'input: '__2,
        'input: '__3,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<HashMap<String, Vec<String>>,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                // __FieldList = FieldList => ActionFn(2);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action2::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
                return Some(Ok(__nt));
            }
            175 => {
                __reduce175(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (String, Vec<String>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, bool), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<Expr<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ComparisonOpcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, HashMap<String, Vec<String>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IndexLink, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Opcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityPart, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityTerm, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, QualifiedIndex, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<ProximityTerm>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(String, Vec<String>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Opcode>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ProximityPart>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Term<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, bool, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<f32>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, f32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u8, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+) = AndExpression, OrOp+ => ActionFn(137);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action137::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = AndExpression, OrOp+ => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action152::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = (<AndExpression> OrOp+)+, AndExpression, OrOp+ => ActionFn(153);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action153::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA) = FieldName, COMMA => ActionFn(100);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action100::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* = (<FieldName> COMMA)+ => ActionFn(99);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = FieldName, COMMA => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action154::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = (<FieldName> COMMA)+, FieldName, COMMA => ActionFn(155);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action155::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA) = JsonProperty, COMMA => ActionFn(113);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action113::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* =  => ActionFn(111);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* = (<JsonProperty> COMMA)+ => ActionFn(112);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = JsonProperty, COMMA => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = (<JsonProperty> COMMA)+, JsonProperty, COMMA => ActionFn(159);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action159::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA) = JsonValue, COMMA => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action108::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* =  => ActionFn(106);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* = (<JsonValue> COMMA)+ => ActionFn(107);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = JsonValue, COMMA => ActionFn(162);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action162::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = (<JsonValue> COMMA)+, JsonValue, COMMA => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action163::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA) = NamedFieldList, COMMA => ActionFn(103);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action103::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* =  => ActionFn(101);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action101::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* = (<NamedFieldList> COMMA)+ => ActionFn(102);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = NamedFieldList, COMMA => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action166::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = (<NamedFieldList> COMMA)+, NamedFieldList, COMMA => ActionFn(167);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action167::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+) = ProximityExpression, WithOp+ => ActionFn(127);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action127::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = ProximityExpression, WithOp+ => ActionFn(170);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action170::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = (<ProximityExpression> WithOp+)+, ProximityExpression, WithOp+ => ActionFn(171);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action171::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr, COMMA => ActionFn(172);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action172::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr => ActionFn(173);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action173::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* = (<StringExpr> COMMA?)+ => ActionFn(117);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr, COMMA => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action174::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr => ActionFn(175);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action175::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr, COMMA => ActionFn(176);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action176::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr => ActionFn(177);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action177::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression => ActionFn(180);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action180::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression, AndOp+ => ActionFn(181);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action181::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression => ActionFn(182);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action182::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression, AndOp+ => ActionFn(183);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action183::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action184::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression, AndOp+ => ActionFn(185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action185::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = (<WithExpression> AndOp*)+, WithExpression => ActionFn(8);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action8::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = WithExpression => ActionFn(9);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AND => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AMPERSAND => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* = AndOp+ => ActionFn(134);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp => ActionFn(140);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action140::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp+, AndOp => ActionFn(141);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action141::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, FLOAT => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action65::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, NUMBER => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? = Boost => ActionFn(121);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? = COMMA => ActionFn(119);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action119::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? =  => ActionFn(120);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action120::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, Term => ActionFn(29);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action29::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String, Boost => ActionFn(186);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action186::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (6, 28)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String => ActionFn(187);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action187::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = Term => ActionFn(31);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, O_PAREN, Expr, C_PAREN => ActionFn(32);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action32::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = O_PAREN, JsonObject, C_PAREN => ActionFn(33);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action33::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = ParentheticalGroup => ActionFn(34);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = COLON => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = EQ => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GT => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LT => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GTE => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LTE => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = NE => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = DOES_NOT_CONTAIN => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = REGEX => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MORE_LIKE_THIS => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = FUZZY_LIKE_THIS => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action54::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MATCHES => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOperator = ComparisonOp => ActionFn(43);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, Filter, C_PAREN => ActionFn(202);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action202::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (8, 31)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, C_PAREN => ActionFn(203);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action203::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (7, 31)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Boost => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action188::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String => ActionFn(189);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action189::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy, Boost => ActionFn(190);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action190::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy => ActionFn(191);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action191::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = OrExpression => ActionFn(3);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = NamedFieldList => ActionFn(168);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action168::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = (<NamedFieldList> COMMA)+, NamedFieldList => ActionFn(169);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action169::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = IDENTIFIER => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = DOTTED_IDENTIFIER => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = QUOTED_IDENTIFIER => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = FieldName => ActionFn(156);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action156::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = (<FieldName> COMMA)+, FieldName => ActionFn(157);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action157::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter = FILTER, O_PAREN, Expr, C_PAREN => ActionFn(82);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action82::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (4, 37)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? = Filter => ActionFn(114);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action114::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action115::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Fuzzy = TILDE => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName => ActionFn(78);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant28(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action78::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (6, 40)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = IDENTIFIER, COLON, O_PAREN, UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName, C_PAREN => ActionFn(79);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant28(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action79::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (10, 40)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, JsonValue, C_BRACKET => ActionFn(208);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action208::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, C_BRACKET => ActionFn(209);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action209::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, JsonValue, C_BRACKET => ActionFn(210);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action210::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 41)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, C_BRACKET => ActionFn(211);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action211::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = TRUE => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action89::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FALSE => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NULL => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action91::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NUMBER => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FLOAT => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = DOUBLE_QUOTED_VALUE => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, JsonProperty, C_BRACE => ActionFn(204);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action204::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, C_BRACE => ActionFn(205);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action205::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, JsonProperty, C_BRACE => ActionFn(206);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action206::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 43)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, C_BRACE => ActionFn(207);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action207::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty = DOUBLE_QUOTED_VALUE, COLON, JsonValue => ActionFn(84);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action84::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? = JsonProperty => ActionFn(109);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action109::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action110::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 45)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonObject => ActionFn(85);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonArray => ActionFn(86);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonLiteral => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? = JsonValue => ActionFn(104);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action105::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 47)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NamedFieldList = FieldName, EQ, O_BRACKET, FieldNameList, C_BRACKET => ActionFn(96);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action96::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 48)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = NOT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = EXCLAMATION => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = (<AndExpression> OrOp+)+, AndExpression => ActionFn(4);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action4::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 50)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = AndExpression => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = OR => ActionFn(6);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = COMMA => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp => ActionFn(138);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action138::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp+, OrOp => ActionFn(139);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action139::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 52)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_PAREN, Expr, C_PAREN => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action35::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_BRACE, Expr, C_BRACE => ActionFn(36);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action36::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = ProximityPart+, ProximityGroup => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action16::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = UnaryExpression => ActionFn(17);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action17::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ParentheticalGroup => ActionFn(19);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action19::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ExpandedPhraseStringExpr => ActionFn(20);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart = ProximityGroup, WithinOperator, NUMBER => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action18::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 56)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart => ActionFn(123);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart+, ProximityPart => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action124::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = NUMBER => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FLOAT => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = TRUE => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FALSE => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = IDENTIFIER => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOTTED_IDENTIFIER => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = UNQUOTED_VALUE => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = QUOTED_VALUE => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action75::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOUBLE_QUOTED_VALUE => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = NULL => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Boost => ActionFn(192);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action192::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String => ActionFn(193);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action193::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy, Boost => ActionFn(194);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action194::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 59)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy => ActionFn(195);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action195::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Subselect = SUBSELECT, LT, IndexLink, GT, ParentheticalGroup => ActionFn(80);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action80::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (5, 60)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TableIndexName = UntrackedFieldName => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = StringExpr => ActionFn(56);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET, Boost => ActionFn(196);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action196::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET => ActionFn(197);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action197::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET, Boost => ActionFn(198);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action198::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 62)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET => ActionFn(199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action199::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray, Boost => ActionFn(200);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action200::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray => ActionFn(201);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action201::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = NotOp, UnaryExpression => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action23::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Subselect => ActionFn(24);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Expand => ActionFn(25);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Comparison => ActionFn(26);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnparsedArray = UNPARSED_ARRAY => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = IDENTIFIER => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = DOTTED_IDENTIFIER => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action41::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = QUOTED_IDENTIFIER => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = (<ProximityExpression> WithOp+)+, ProximityExpression => ActionFn(12);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action12::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = ProximityExpression => ActionFn(13);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = WITH => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = PERCENT => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp => ActionFn(128);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action128::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp+, WithOp => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action129::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 68)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN => ActionFn(21);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action21::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN_ORDER => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Expr = Expr => ActionFn(0);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __IndexLink = IndexLink => ActionFn(1);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 72)
    }
}
pub use self::__parse__FieldList::FieldListParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__IndexLink {

    use std::str::FromStr;
    use std::collections::HashSet;
    use crate::zql::ast::*;
    use std::collections::HashMap;
    use pgrx::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Box<Expr<'input>>),
        Variant2(alloc::vec::Vec<Box<Expr<'input>>>),
        Variant3(alloc::vec::Vec<&'input str>),
        Variant4(String),
        Variant5(alloc::vec::Vec<String>),
        Variant6((String, Vec<String>)),
        Variant7(alloc::vec::Vec<(String, Vec<String>)>),
        Variant8(Term<'input>),
        Variant9(alloc::vec::Vec<Term<'input>>),
        Variant10(Opcode),
        Variant11(alloc::vec::Vec<Opcode>),
        Variant12(f32),
        Variant13(core::option::Option<f32>),
        Variant14(core::option::Option<&'input str>),
        Variant15(ComparisonOpcode),
        Variant16(Expr<'input>),
        Variant17(ProximityTerm),
        Variant18(HashMap<String, Vec<String>>),
        Variant19(Vec<String>),
        Variant20(core::option::Option<Box<Expr<'input>>>),
        Variant21(u8),
        Variant22(IndexLink),
        Variant23(core::option::Option<String>),
        Variant24(Vec<ProximityTerm>),
        Variant25(ProximityPart),
        Variant26(alloc::vec::Vec<ProximityPart>),
        Variant27((&'input str, bool)),
        Variant28(QualifiedIndex),
        Variant29(bool),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 47 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        -176,
        // State 7
        0,
        // State 8
        -164,
        // State 9
        0,
        // State 10
        -165,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        -163,
        // State 16
        0,
        // State 17
        0,
        // State 18
        -93,
        // State 19
        0,
        // State 20
        0,
        // State 21
        -94,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            40 => 6,
            61 => match state {
                4 => 19,
                _ => 13,
            },
            65 => match state {
                0 => 7,
                2 => 16,
                3 => 18,
                5 => 20,
                _ => 14,
            },
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"AMPERSAND"###,
        r###"AND"###,
        r###"CARET"###,
        r###"COLON"###,
        r###"COMMA"###,
        r###"C_BRACE"###,
        r###"C_BRACKET"###,
        r###"C_PAREN"###,
        r###"DOES_NOT_CONTAIN"###,
        r###"DOT"###,
        r###"DOTTED_IDENTIFIER"###,
        r###"DOUBLE_QUOTED_VALUE"###,
        r###"EQ"###,
        r###"EXCLAMATION"###,
        r###"EXPAND"###,
        r###"FALSE"###,
        r###"FILTER"###,
        r###"FLOAT"###,
        r###"FUZZY_LIKE_THIS"###,
        r###"GT"###,
        r###"GTE"###,
        r###"IDENTIFIER"###,
        r###"LT"###,
        r###"LTE"###,
        r###"MATCHES"###,
        r###"MORE_LIKE_THIS"###,
        r###"NE"###,
        r###"NOT"###,
        r###"NULL"###,
        r###"NUMBER"###,
        r###"OR"###,
        r###"O_BRACE"###,
        r###"O_BRACKET"###,
        r###"O_PAREN"###,
        r###"PERCENT"###,
        r###"QUOTED_IDENTIFIER"###,
        r###"QUOTED_VALUE"###,
        r###"REGEX"###,
        r###"SUBSELECT"###,
        r###"TILDE"###,
        r###"TO"###,
        r###"TRUE"###,
        r###"UNPARSED_ARRAY"###,
        r###"UNQUOTED_VALUE"###,
        r###"WITH"###,
        r###"WITHIN"###,
        r###"WITHIN_ORDER"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: '__2,
        'input: '__3,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        source_index: Option<&'__1 PgRelation>,
        used_fields: &'__2 mut HashSet<&'input str>,
        fieldname_stack: &'__3 mut Vec<&'input str>,
        operator_stack: &'__4 mut Vec<ComparisonOpcode>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1, '__2, '__3, '__4> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2, '__3, '__4>
    where 'input: '__2, 'input: '__3
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = IndexLink;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 47 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.source_index,
                self.used_fields,
                self.fieldname_stack,
                self.operator_stack,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(18, _) if true => Some(0),
            Token(8, _) if true => Some(1),
            Token(21, _) if true => Some(2),
            Token(32, _) if true => Some(3),
            Token(19, _) if true => Some(4),
            Token(46, _) if true => Some(5),
            Token(44, _) if true => Some(6),
            Token(31, _) if true => Some(7),
            Token(38, _) if true => Some(8),
            Token(20, _) if true => Some(9),
            Token(4, _) if true => Some(10),
            Token(0, _) if true => Some(11),
            Token(39, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(9, _) if true => Some(15),
            Token(23, _) if true => Some(16),
            Token(27, _) if true => Some(17),
            Token(34, _) if true => Some(18),
            Token(41, _) if true => Some(19),
            Token(42, _) if true => Some(20),
            Token(5, _) if true => Some(21),
            Token(36, _) if true => Some(22),
            Token(37, _) if true => Some(23),
            Token(40, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(10, _) if true => Some(27),
            Token(11, _) if true => Some(28),
            Token(28, _) if true => Some(29),
            Token(12, _) if true => Some(30),
            Token(45, _) if true => Some(31),
            Token(43, _) if true => Some(32),
            Token(30, _) if true => Some(33),
            Token(17, _) if true => Some(34),
            Token(6, _) if true => Some(35),
            Token(1, _) if true => Some(36),
            Token(35, _) if true => Some(37),
            Token(24, _) if true => Some(38),
            Token(15, _) if true => Some(39),
            Token(7, _) if true => Some(40),
            Token(13, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            Token(2, _) if true => Some(43),
            Token(14, _) if true => Some(44),
            Token(25, _) if true => Some(45),
            Token(26, _) if true => Some(46),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 => match __token {
                Token(18, __tok0) | Token(8, __tok0) | Token(21, __tok0) | Token(32, __tok0) | Token(19, __tok0) | Token(46, __tok0) | Token(44, __tok0) | Token(31, __tok0) | Token(38, __tok0) | Token(20, __tok0) | Token(4, __tok0) | Token(0, __tok0) | Token(39, __tok0) | Token(16, __tok0) | Token(22, __tok0) | Token(9, __tok0) | Token(23, __tok0) | Token(27, __tok0) | Token(34, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(5, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(40, __tok0) | Token(33, __tok0) | Token(29, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(28, __tok0) | Token(12, __tok0) | Token(45, __tok0) | Token(43, __tok0) | Token(30, __tok0) | Token(17, __tok0) | Token(6, __tok0) | Token(1, __tok0) | Token(35, __tok0) | Token(24, __tok0) | Token(15, __tok0) | Token(7, __tok0) | Token(13, __tok0) | Token(3, __tok0) | Token(2, __tok0) | Token(14, __tok0) | Token(25, __tok0) | Token(26, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2, '__3, '__4>>
    where
        'input: '__2,
        'input: '__3,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 9,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 12,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 20,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 21,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 23,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 28,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 28,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 31,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 31,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 32,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 37,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 38,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 40,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 41,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 44,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 45,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 47,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 48,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 50,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 52,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 53,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 56,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 59,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 60,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 62,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 63,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 66,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 68,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            175 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct IndexLinkParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl IndexLinkParser {
        pub fn new() -> IndexLinkParser {
            let __builder = super::__intern_token::new_builder();
            IndexLinkParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            source_index: Option<&PgRelation>,
            used_fields: &mut HashSet<&'input str>,
            fieldname_stack: &mut Vec<&'input str>,
            operator_stack: &mut Vec<ComparisonOpcode>,
            input: &'input str,
        ) -> Result<IndexLink, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    source_index,
                    used_fields,
                    fieldname_stack,
                    operator_stack,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
        '__2,
        '__3,
        '__4,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    where
        'input: '__2,
        'input: '__3,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<IndexLink,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(source_index, used_fields, fieldname_stack, operator_stack, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                // __IndexLink = IndexLink => ActionFn(1);
                let __sym0 = __pop_Variant22(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action1::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (String, Vec<String>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, bool), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<Expr<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ComparisonOpcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, HashMap<String, Vec<String>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IndexLink, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Opcode, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityPart, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ProximityTerm, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, QualifiedIndex, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<ProximityTerm>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(String, Vec<String>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Opcode>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ProximityPart>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Term<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, bool, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Box<Expr<'input>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<String>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<f32>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, f32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u8, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+) = AndExpression, OrOp+ => ActionFn(137);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action137::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = AndExpression, OrOp+ => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action152::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<AndExpression> OrOp+)+ = (<AndExpression> OrOp+)+, AndExpression, OrOp+ => ActionFn(153);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action153::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA) = FieldName, COMMA => ActionFn(100);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action100::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)* = (<FieldName> COMMA)+ => ActionFn(99);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = FieldName, COMMA => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action154::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FieldName> COMMA)+ = (<FieldName> COMMA)+, FieldName, COMMA => ActionFn(155);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action155::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA) = JsonProperty, COMMA => ActionFn(113);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action113::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* =  => ActionFn(111);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)* = (<JsonProperty> COMMA)+ => ActionFn(112);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = JsonProperty, COMMA => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonProperty> COMMA)+ = (<JsonProperty> COMMA)+, JsonProperty, COMMA => ActionFn(159);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action159::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA) = JsonValue, COMMA => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action108::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* =  => ActionFn(106);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)* = (<JsonValue> COMMA)+ => ActionFn(107);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = JsonValue, COMMA => ActionFn(162);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action162::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<JsonValue> COMMA)+ = (<JsonValue> COMMA)+, JsonValue, COMMA => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action163::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA) = NamedFieldList, COMMA => ActionFn(103);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action103::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* =  => ActionFn(101);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action101::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)* = (<NamedFieldList> COMMA)+ => ActionFn(102);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = NamedFieldList, COMMA => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action166::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<NamedFieldList> COMMA)+ = (<NamedFieldList> COMMA)+, NamedFieldList, COMMA => ActionFn(167);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action167::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+) = ProximityExpression, WithOp+ => ActionFn(127);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action127::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = ProximityExpression, WithOp+ => ActionFn(170);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action170::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ProximityExpression> WithOp+)+ = (<ProximityExpression> WithOp+)+, ProximityExpression, WithOp+ => ActionFn(171);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action171::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr, COMMA => ActionFn(172);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action172::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?) = StringExpr => ActionFn(173);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action173::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)* = (<StringExpr> COMMA?)+ => ActionFn(117);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr, COMMA => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action174::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = StringExpr => ActionFn(175);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action175::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr, COMMA => ActionFn(176);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action176::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StringExpr> COMMA?)+ = (<StringExpr> COMMA?)+, StringExpr => ActionFn(177);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action177::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression => ActionFn(180);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action180::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*) = WithExpression, AndOp+ => ActionFn(181);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action181::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression => ActionFn(182);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action182::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = WithExpression, AndOp+ => ActionFn(183);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action183::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action184::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<WithExpression> AndOp*)+ = (<WithExpression> AndOp*)+, WithExpression, AndOp+ => ActionFn(185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action185::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = (<WithExpression> AndOp*)+, WithExpression => ActionFn(8);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action8::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = WithExpression => ActionFn(9);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AND => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp = AMPERSAND => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp* = AndOp+ => ActionFn(134);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp => ActionFn(140);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action140::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndOp+ = AndOp+, AndOp => ActionFn(141);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action141::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, FLOAT => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action65::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost = CARET, NUMBER => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? = Boost => ActionFn(121);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Boost? =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? = COMMA => ActionFn(119);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action119::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // COMMA? =  => ActionFn(120);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action120::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, Term => ActionFn(29);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action29::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String, Boost => ActionFn(186);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action186::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (6, 28)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, String, TO, String => ActionFn(187);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action187::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = Term => ActionFn(31);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = FieldName, ComparisonOperator, O_PAREN, Expr, C_PAREN => ActionFn(32);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action32::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 28)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = O_PAREN, JsonObject, C_PAREN => ActionFn(33);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action33::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comparison = ParentheticalGroup => ActionFn(34);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = COLON => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = EQ => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GT => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LT => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = GTE => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = LTE => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = NE => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = DOES_NOT_CONTAIN => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = REGEX => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MORE_LIKE_THIS => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = FUZZY_LIKE_THIS => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action54::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOp = MATCHES => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ComparisonOperator = ComparisonOp => ActionFn(43);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, Filter, C_PAREN => ActionFn(202);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action202::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (8, 31)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expand = EXPAND, LT, IndexLink, GT, O_PAREN, Expr, C_PAREN => ActionFn(203);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action203::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (7, 31)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Boost => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action188::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String => ActionFn(189);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action189::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy, Boost => ActionFn(190);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action190::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpandedPhraseStringExpr = String, Fuzzy => ActionFn(191);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action191::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = OrExpression => ActionFn(3);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = NamedFieldList => ActionFn(168);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action168::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = (<NamedFieldList> COMMA)+, NamedFieldList => ActionFn(169);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action169::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = IDENTIFIER => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = DOTTED_IDENTIFIER => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldName = QUOTED_IDENTIFIER => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = FieldName => ActionFn(156);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action156::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldNameList = (<FieldName> COMMA)+, FieldName => ActionFn(157);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action157::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter = FILTER, O_PAREN, Expr, C_PAREN => ActionFn(82);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action82::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (4, 37)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? = Filter => ActionFn(114);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action114::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Filter? =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action115::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Fuzzy = TILDE => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName => ActionFn(78);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant28(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action78::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (6, 40)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IndexLink = IDENTIFIER, COLON, O_PAREN, UntrackedFieldName, EQ, LT, TableIndexName, GT, UntrackedFieldName, C_PAREN => ActionFn(79);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant28(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action79::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (10, 40)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, JsonValue, C_BRACKET => ActionFn(208);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action208::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, C_BRACKET => ActionFn(209);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action209::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, JsonValue, C_BRACKET => ActionFn(210);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action210::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 41)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonArray = O_BRACKET, (<JsonValue> COMMA)+, C_BRACKET => ActionFn(211);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action211::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = TRUE => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action89::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FALSE => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NULL => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action91::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = NUMBER => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = FLOAT => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonLiteral = DOUBLE_QUOTED_VALUE => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, JsonProperty, C_BRACE => ActionFn(204);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action204::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, C_BRACE => ActionFn(205);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action205::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, JsonProperty, C_BRACE => ActionFn(206);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action206::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 43)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonObject = O_BRACE, (<JsonProperty> COMMA)+, C_BRACE => ActionFn(207);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action207::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty = DOUBLE_QUOTED_VALUE, COLON, JsonValue => ActionFn(84);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action84::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? = JsonProperty => ActionFn(109);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action109::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonProperty? =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action110::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 45)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonObject => ActionFn(85);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonArray => ActionFn(86);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue = JsonLiteral => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? = JsonValue => ActionFn(104);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JsonValue? =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action105::<>(source_index, used_fields, fieldname_stack, operator_stack, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 47)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NamedFieldList = FieldName, EQ, O_BRACKET, FieldNameList, C_BRACKET => ActionFn(96);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action96::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 48)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = NOT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NotOp = EXCLAMATION => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = (<AndExpression> OrOp+)+, AndExpression => ActionFn(4);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action4::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 50)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrExpression = AndExpression => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = OR => ActionFn(6);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp = COMMA => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp => ActionFn(138);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action138::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OrOp+ = OrOp+, OrOp => ActionFn(139);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action139::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 52)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_PAREN, Expr, C_PAREN => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action35::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParentheticalGroup = O_BRACE, Expr, C_BRACE => ActionFn(36);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action36::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = ProximityPart+, ProximityGroup => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action16::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityExpression = UnaryExpression => ActionFn(17);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action17::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ParentheticalGroup => ActionFn(19);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action19::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityGroup = ExpandedPhraseStringExpr => ActionFn(20);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart = ProximityGroup, WithinOperator, NUMBER => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action18::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 56)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart => ActionFn(123);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProximityPart+ = ProximityPart+, ProximityPart => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action124::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = NUMBER => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FLOAT => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = TRUE => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = FALSE => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = IDENTIFIER => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOTTED_IDENTIFIER => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = UNQUOTED_VALUE => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = QUOTED_VALUE => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action75::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // String = DOUBLE_QUOTED_VALUE => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = NULL => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Boost => ActionFn(192);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action192::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String => ActionFn(193);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action193::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy, Boost => ActionFn(194);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action194::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 59)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringExpr = String, Fuzzy => ActionFn(195);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action195::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Subselect = SUBSELECT, LT, IndexLink, GT, ParentheticalGroup => ActionFn(80);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action80::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (5, 60)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TableIndexName = UntrackedFieldName => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = StringExpr => ActionFn(56);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET, Boost => ActionFn(196);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action196::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, C_BRACKET => ActionFn(197);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action197::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET, Boost => ActionFn(198);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action198::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 62)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = O_BRACKET, (<StringExpr> COMMA?)+, C_BRACKET => ActionFn(199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action199::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray, Boost => ActionFn(200);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action200::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = UnparsedArray => ActionFn(201);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action201::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = NotOp, UnaryExpression => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action23::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Subselect => ActionFn(24);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Expand => ActionFn(25);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnaryExpression = Comparison => ActionFn(26);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnparsedArray = UNPARSED_ARRAY => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = IDENTIFIER => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = DOTTED_IDENTIFIER => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action41::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UntrackedFieldName = QUOTED_IDENTIFIER => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = (<ProximityExpression> WithOp+)+, ProximityExpression => ActionFn(12);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action12::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithExpression = ProximityExpression => ActionFn(13);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = WITH => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp = PERCENT => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp => ActionFn(128);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action128::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithOp+ = WithOp+, WithOp => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action129::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 68)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN => ActionFn(21);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action21::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WithinOperator = WITHIN_ORDER => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Expr = Expr => ActionFn(0);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        source_index: Option<&PgRelation>,
        used_fields: &mut HashSet<&'input str>,
        fieldname_stack: &mut Vec<&'input str>,
        operator_stack: &mut Vec<ComparisonOpcode>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __FieldList = FieldList => ActionFn(2);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(source_index, used_fields, fieldname_stack, operator_stack, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 71)
    }
}
pub use self::__parse__IndexLink::IndexLinkParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use std::str::FromStr;
    use std::collections::HashSet;
    use crate::zql::ast::*;
    use std::collections::HashMap;
    use pgrx::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^((?:\"(?:(?:\\\\[\0-\t\u{b}-\u{10ffff}])|[\0-!\\#-\\[\\]-\u{10ffff}])*\"))", false),
            ("^((?:'(?:(?:\\\\[\0-\t\u{b}-\u{10ffff}])|[\0-\\&\\(-\\[\\]-\u{10ffff}])*'))", false),
            ("^(((?:((?:[\0-\u{8}\u{e}-\u{1f}\\#\\$\\*\\+\\-\\.0-9;\\?-Z_-z\\|\u{7f}-\u{10ffff}]|((?:\\\\[\0-\t\u{b}-\u{10ffff}]))))+\\.?))+)", false),
            ("^((?:(?:\\[\\[)[\0-\\\\\\^-\u{10ffff}]*(?:\\]\\])))", false),
            ("^(((?:[0-9A-Z_a-zſK]+((?:\\.[0-9A-Z_a-zſK]+))+)))", false),
            ("^([0-9A-Z_a-zſK]+)", false),
            ("^((?:`[\0-_a-\u{10ffff}]+`))", false),
            ("^((?:/[Tt][Oo]/))", false),
            ("^((?:[Aa][Nn][Dd]))", false),
            ("^((?:[Ff][Aa][Ll][Ssſ][Ee]))", false),
            ("^((?:[Nn][Oo][Tt]))", false),
            ("^((?:[Nn][Uu][Ll][Ll]))", false),
            ("^((?:[Oo][Rr]))", false),
            ("^((?:[Tt][Rr][Uu][Ee]))", false),
            ("^((?:[Ww][Ii][Tt][Hh]))", false),
            ("^((?:\\~[0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９𐒠-𐒩𐴰-𐴹𑁦-𑁯𑃰-𑃹𑄶-𑄿𑇐-𑇙𑋰-𑋹𑑐-𑑙𑓐-𑓙𑙐-𑙙𑛀-𑛉𑜰-𑜹𑣠-𑣩𑥐-𑥙𑱐-𑱙𑵐-𑵙𑶠-𑶩𑽐-𑽙𖩠-𖩩𖫀-𖫉𖭐-𖭙𝟎-𝟿𞅀-𞅉𞋰-𞋹𞓰-𞓹𞥐-𞥙🯰-🯹]*))", false),
            ("^(!)", false),
            ("^(%)", false),
            ("^(\\&)", false),
            ("^(,)", false),
            ("^(\\.)", false),
            ("^(\\^)", false),
            ("^((?:\\#[Ee][Xx][Pp][Aa][Nn][Dd]))", false),
            ("^((?:\\#[Ff][Ii][Ll][Tt][Ee][Rr]))", false),
            ("^((?:\\#[Ssſ][Uu][Bb][Ssſ][Ee][Ll][Ee][Cc][Tt]))", false),
            ("^((?:[Ww]/))", false),
            ("^((?:[Ww][Oo]/))", false),
            ("^((?:[\\+\\-]?[0-9]*\\.[0-9]+((?:[Ee][\\+\\-]?[0-9]+))?))", false),
            ("^((?:[\\+\\-]?[0-9]+))", false),
            ("^((?:!=))", false),
            ("^(\\()", false),
            ("^(\\))", false),
            ("^(:)", false),
            ("^((?::@))", false),
            ("^((?::@\\~))", false),
            ("^((?::\\~))", false),
            ("^(<)", false),
            ("^((?:<=))", false),
            ("^((?:<>))", false),
            ("^(=)", false),
            ("^((?:==>))", false),
            ("^(>)", false),
            ("^((?:>=))", false),
            ("^(\\[)", false),
            ("^(\\])", false),
            ("^(\\{)", false),
            ("^(\\})", false),
            (r"^(\s*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub(crate) use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action0<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action1<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, IndexLink, usize),
) -> IndexLink {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action2<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, HashMap<String, Vec<String>>, usize),
) -> HashMap<String, Vec<String>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action3<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action4<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, r, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    {
        let mut final_children: Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::OrList(mut children) => {
                final_children.append(&mut children);
            }
            other => {
                final_children.push(other);
            }
        }

        Box::new(Expr::OrList(final_children))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action5<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action6<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::Or
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action7<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::Or
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action8<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, r, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    {
        let mut final_children: Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::AndList(mut children) => {
                final_children.append(&mut children);
            }
            other => {
                final_children.push(other);
            }
        }

        Box::new(Expr::AndList(final_children))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action9<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action10<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::And
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action11<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::And
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action12<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, r, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    {
        let mut final_children: Vec<Expr> = v.into_iter().map(|b| *b).collect();
        match *r {
            Expr::WithList(mut children) => {
                final_children.append(&mut children);
            }
            other => {
                final_children.push(other);
            }
        }

        Box::new(Expr::WithList(final_children))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action13<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action14<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::With
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action15<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::With
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action16<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, mut parts, _): (usize, alloc::vec::Vec<ProximityPart>, usize),
    (_, words, _): (usize, Vec<ProximityTerm>, usize),
) -> Box<Expr<'input>> {
    {
        parts.push(ProximityPart {
            words,
            distance: None,
        });

        let field_name = fieldname_stack.last().unwrap();
        let operator = operator_stack.last().unwrap();

        used_fields.insert(field_name);

        Box::new(Expr::from_opcode(
            field_name,
            *operator,
            Term::ProximityChain(parts),
        ))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action17<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action18<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, words, _): (usize, Vec<ProximityTerm>, usize),
    (_, in_order, _): (usize, bool, usize),
    (_, distance, _): (usize, &'input str, usize),
) -> ProximityPart {
    {
        ProximityPart {
            words,
            distance: Some(ProximityDistance {
                distance: u32::from_str(distance).unwrap(),
                in_order,
            }),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action19<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Vec<ProximityTerm> {
    __0.extract_prox_terms(source_index)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action20<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, ProximityTerm, usize),
) -> Vec<ProximityTerm> {
    vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action21<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool {
    false
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action22<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool {
    true
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action23<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, Opcode, usize),
    (_, t, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    Box::new(Expr::Not(t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action24<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Box<Expr<'input>> {
    Box::new(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action25<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Box<Expr<'input>> {
    Box::new(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action26<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action27<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::Not
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action28<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Opcode {
    Opcode::Not
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action29<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, ComparisonOpcode, usize),
    (_, __2, _): (usize, Term<'input>, usize),
) -> Box<Expr<'input>> {
    {
        fieldname_stack.pop();
        operator_stack.pop();
        Box::new(Expr::from_opcode(__0, __1, __2))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action30<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, field_name, _): (usize, &'input str, usize),
    (_, operator, _): (usize, ComparisonOpcode, usize),
    (_, start, _): (usize, (&'input str, bool), usize),
    (_, _, _): (usize, &'input str, usize),
    (_, end, _): (usize, (&'input str, bool), usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> Box<Expr<'input>> {
    {
        fieldname_stack.pop();
        operator_stack.pop();

        Box::new(Expr::range_from_opcode(field_name, operator, start, end, b))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action31<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Term<'input>, usize),
) -> Box<Expr<'input>> {
    {
        let field_name = fieldname_stack.last().unwrap();
        let operator = operator_stack.last().unwrap();
        let right = __0;

        used_fields.insert(field_name);

        Box::new(Expr::from_opcode(field_name, *operator, right))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action32<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ComparisonOpcode, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expr<'input>> {
    {
        fieldname_stack.pop();
        operator_stack.pop();
        __0
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action33<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expr<'input>> {
    Box::new(Expr::Json(__0))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action34<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action35<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action36<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action37<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    {
        let mut fieldname = __0;

        // rewrite a field named "_all" for backwards compatibility w/ old versions of ZDB/ES
        if fieldname == "_all" {
            fieldname = "zdb_all";
        }

        fieldname_stack.push(fieldname);
        used_fields.insert(fieldname);
        fieldname
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action38<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    {
        fieldname_stack.push(__0);
        used_fields.insert(__0);
        __0
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action39<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    {
        let fieldname = &__0[1..__0.len() - 1];
        fieldname_stack.push(fieldname);
        used_fields.insert(fieldname);
        fieldname
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action40<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action41<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action42<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action43<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, ComparisonOpcode, usize),
) -> ComparisonOpcode {
    {
        operator_stack.push(__0);
        __0
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action44<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Contains
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action45<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Eq
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action46<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Gt
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action47<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Lt
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action48<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Gte
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action49<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Lte
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action50<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Ne
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action51<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::DoesNotContain
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action52<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Regex
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action53<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::MoreLikeThis
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action54<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::FuzzyLikeThis
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action55<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ComparisonOpcode {
    ComparisonOpcode::Matches
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action56<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Term<'input>, usize),
) -> Term<'input> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action57<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, alloc::vec::Vec<Term<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    {
        if v.is_empty() {
            Term::MatchNone
        } else {
            Term::ParsedArray(v, b)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action58<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, a, _): (usize, &'input str, usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    {
        if a.trim().is_empty() {
            Term::MatchNone
        } else {
            Term::UnparsedArray(a, b)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action59<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    {
        &__0[2..__0.len() - 2]
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action60<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term<'input> {
    Term::Null
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action61<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, s, _): (usize, (&'input str, bool), usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    {
        match Term::maybe_make_wildcard_or_regex(operator_stack.last(), s.0, b) {
            Term::String(t, b) if s.1 == true => Term::Phrase(t, b),
            other => other,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action62<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, s, _): (usize, (&'input str, bool), usize),
    (_, f, _): (usize, u8, usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    Term::Fuzzy(s.0, f, b)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action63<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, s, _): (usize, (&'input str, bool), usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> ProximityTerm {
    ProximityTerm::make_proximity_term(operator_stack.last(), s.0, b)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action64<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, s, _): (usize, (&'input str, bool), usize),
    (_, f, _): (usize, u8, usize),
    (_, b, _): (usize, core::option::Option<f32>, usize),
) -> ProximityTerm {
    ProximityTerm::Fuzzy(s.0.into(), f, b)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action65<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
) -> f32 {
    f32::from_str(__0).unwrap()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action66<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
) -> f32 {
    f32::from_str(__0).unwrap()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action67<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> u8 {
    {
        let fuzz = &__0[1..];
        if fuzz.is_empty() {
            3 // default
        } else {
            u8::from_str(fuzz).unwrap()
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action68<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    (__0, false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action69<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    (__0, false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action70<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    ("true", false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action71<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    ("false", false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action72<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    (__0, false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action73<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    (__0, false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action74<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    (__0, false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action75<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    {
        let s = __0;
        let s = &s[1..s.len() - 1];
        (s, true)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action76<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> (&'input str, bool) {
    {
        let s = __0;
        let s = &s[1..s.len() - 1];
        (s, true)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action77<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> QualifiedIndex {
    {
        let name = __0;
        let name = if name.starts_with('`') && name.ends_with('`') {
            // if it's a QUOTED_IDENTIFIER we need to strip off the leading and trailing backticks
            &name[1..name.len() - 1]
        } else {
            // intended to use as-is
            name
        };
        let mut parts = name.split_terminator('.');
        let mut schema = parts.next();
        let mut table = parts.next();
        let mut index = parts.next();

        if schema == Some("this") && table == Some("index") && index.is_none() {
            // for backwards compatibility, if the user simply writes <this.index>, we'll
            // force the schema to "public"
            index = table; // "index"
            table = schema; // "this"
            schema = Some("public");
        } else if schema.is_none() || table.is_none() || index.is_none() {
            panic!(
                "qualified index ({}) must be schema qualified.  ie, schema.table.index",
                __0
            );
        } else if parts.next().is_some() {
            panic!("index link schema.table.index is too long: {}", __0);
        }

        QualifiedIndex {
            schema: Some(schema.unwrap().to_string()),
            table: table.unwrap().to_string(),
            index: index.unwrap().to_string(),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action78<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, left_field, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, qualified_index, _): (usize, QualifiedIndex, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, right_field, _): (usize, &'input str, usize),
) -> IndexLink {
    IndexLink {
        name: None,
        left_field: Some(left_field.to_string()),
        qualified_index,
        right_field: Some(right_field.to_string()),
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action79<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, name, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, left_field, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, qualified_index, _): (usize, QualifiedIndex, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, right_field, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
) -> IndexLink {
    IndexLink {
        name: Some(name.to_string()),
        left_field: Some(left_field.to_string()),
        qualified_index,
        right_field: Some(right_field.to_string()),
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action80<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, link, _): (usize, IndexLink, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, q, _): (usize, Box<Expr<'input>>, usize),
) -> Expr<'input> {
    Expr::Subselect(link, q)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action81<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, link, _): (usize, IndexLink, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Box<Expr<'input>>, usize),
    (_, f, _): (usize, core::option::Option<Box<Expr<'input>>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr<'input> {
    Expr::Expand(link, e, f)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action82<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expr<'input>> {
    e
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action83<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
    (_, e, _): (usize, core::option::Option<String>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> String {
    {
        let props = match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        };

        let mut json = String::new();
        json.push('{');
        for (i, p) in props.iter().enumerate() {
            if i > 0 {
                json.push(',')
            }
            json.push_str(p);
        }
        json.push('}');
        json
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action84<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, k, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, String, usize),
) -> String {
    format!("{}:{}", k, v)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action85<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> String {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action86<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> String {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action87<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> String {
    __0.to_string()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action88<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
    (_, e, _): (usize, core::option::Option<String>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> String {
    {
        let v = match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        };

        let mut array = String::new();
        array.push('[');
        for (i, v) in v.iter().enumerate() {
            if i > 0 {
                array.push(',');
            }
            array.push_str(&v);
        }
        array.push(']');
        array
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action89<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action90<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action91<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action92<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action93<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action94<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action95<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, mut field_lists, _): (usize, alloc::vec::Vec<(String, Vec<String>)>, usize),
    (_, e, _): (usize, (String, Vec<String>), usize),
) -> HashMap<String, Vec<String>> {
    {
        field_lists.push(e);
        let mut map = HashMap::new();
        for field in field_lists {
            if map.contains_key(&field.0) {
                panic!("duplicate named field lists: {}", field.0);
            }
            map.insert(field.0.into(), field.1);
        }
        map
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action96<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, name, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, list, _): (usize, Vec<String>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> (String, Vec<String>) {
    {
        (name.into(), list)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action97<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<&'input str>, usize),
    (_, e, _): (usize, &'input str, usize),
) -> Vec<String> {
    {
        v.push(e);
        v.into_iter().map(|e| e.into()).collect()
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action98<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<&'input str> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action99<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<&'input str>, usize),
) -> alloc::vec::Vec<&'input str> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action100<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
) -> &'input str {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action101<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<(String, Vec<String>)> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action102<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, Vec<String>)>, usize),
) -> alloc::vec::Vec<(String, Vec<String>)> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action103<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, (String, Vec<String>), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (String, Vec<String>) {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action104<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> core::option::Option<String> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action105<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<String> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action106<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<String> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action107<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
) -> alloc::vec::Vec<String> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action108<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
) -> String {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action109<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> core::option::Option<String> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action110<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<String> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action111<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<String> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action112<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
) -> alloc::vec::Vec<String> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action113<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
) -> String {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action114<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> core::option::Option<Box<Expr<'input>>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action115<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Box<Expr<'input>>> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action116<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Term<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action117<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Term<'input>>, usize),
) -> alloc::vec::Vec<Term<'input>> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action118<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Term<'input>, usize),
    (_, _, _): (usize, core::option::Option<&'input str>, usize),
) -> Term<'input> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action119<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> core::option::Option<&'input str> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action120<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<&'input str> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action121<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, f32, usize),
) -> core::option::Option<f32> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action122<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<f32> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action123<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, ProximityPart, usize),
) -> alloc::vec::Vec<ProximityPart> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action124<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<ProximityPart>, usize),
    (_, e, _): (usize, ProximityPart, usize),
) -> alloc::vec::Vec<ProximityPart> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action125<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action126<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, e, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action127<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, alloc::vec::Vec<Opcode>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action128<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action129<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Opcode>, usize),
    (_, e, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action130<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action131<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, e, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action132<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, alloc::vec::Vec<Opcode>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action133<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Opcode> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action134<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Opcode> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action135<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action136<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    (_, e, _): (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action137<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, _, _): (usize, alloc::vec::Vec<Opcode>, usize),
) -> Box<Expr<'input>> {
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action138<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action139<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Opcode>, usize),
    (_, e, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action140<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action141<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Opcode>, usize),
    (_, e, _): (usize, Opcode, usize),
) -> alloc::vec::Vec<Opcode> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action142<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, Term<'input>, usize),
) -> alloc::vec::Vec<Term<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action143<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Term<'input>>, usize),
    (_, e, _): (usize, Term<'input>, usize),
) -> alloc::vec::Vec<Term<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action144<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> alloc::vec::Vec<String> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action145<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
    (_, e, _): (usize, String, usize),
) -> alloc::vec::Vec<String> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action146<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> alloc::vec::Vec<String> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action147<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<String>, usize),
    (_, e, _): (usize, String, usize),
) -> alloc::vec::Vec<String> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action148<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, (String, Vec<String>), usize),
) -> alloc::vec::Vec<(String, Vec<String>)> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action149<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<(String, Vec<String>)>, usize),
    (_, e, _): (usize, (String, Vec<String>), usize),
) -> alloc::vec::Vec<(String, Vec<String>)> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action150<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> alloc::vec::Vec<&'input str> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action151<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<&'input str>, usize),
    (_, e, _): (usize, &'input str, usize),
) -> alloc::vec::Vec<&'input str> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action152<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
    __1: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action137(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action153<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    __1: (usize, Box<Expr<'input>>, usize),
    __2: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action137(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action154<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<&'input str> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action100(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action155<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<&'input str>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<&'input str> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action100(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action156<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Vec<String> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action98(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action157<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<&'input str>, usize),
    __1: (usize, &'input str, usize),
) -> Vec<String> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action99(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action158<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<String> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action113(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action159<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<String>, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<String> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action113(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action160<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, core::option::Option<String>, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action111(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action161<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, core::option::Option<String>, usize),
    __3: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action112(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action162<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<String> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action108(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action163<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<String>, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<String> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action108(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action164<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, core::option::Option<String>, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action106(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action165<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, core::option::Option<String>, usize),
    __3: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action107(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action166<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (String, Vec<String>), usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, Vec<String>)> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action103(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action167<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Vec<String>)>, usize),
    __1: (usize, (String, Vec<String>), usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<(String, Vec<String>)> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action103(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action168<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (String, Vec<String>), usize),
) -> HashMap<String, Vec<String>> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action101(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action169<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<(String, Vec<String>)>, usize),
    __1: (usize, (String, Vec<String>), usize),
) -> HashMap<String, Vec<String>> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action102(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action170<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
    __1: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action127(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action171<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    __1: (usize, Box<Expr<'input>>, usize),
    __2: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action127(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action172<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Term<'input>, usize),
    __1: (usize, &'input str, usize),
) -> Term<'input> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action119(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action173<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Term<'input>, usize),
) -> Term<'input> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action120(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action174<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Term<'input>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Term<'input>> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action172(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action175<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Term<'input>, usize),
) -> alloc::vec::Vec<Term<'input>> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action173(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action176<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Term<'input>>, usize),
    __1: (usize, Term<'input>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Term<'input>> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action172(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action177<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Term<'input>>, usize),
    __1: (usize, Term<'input>, usize),
) -> alloc::vec::Vec<Term<'input>> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action173(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action178<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action116(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action179<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<Term<'input>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, core::option::Option<f32>, usize),
) -> Term<'input> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action117(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action180<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
) -> Box<Expr<'input>> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action133(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action181<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
    __1: (usize, alloc::vec::Vec<Opcode>, usize),
) -> Box<Expr<'input>> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action134(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action182<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action180(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action183<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, Box<Expr<'input>>, usize),
    __1: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action181(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action184<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    __1: (usize, Box<Expr<'input>>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action180(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action185<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expr<'input>>>, usize),
    __1: (usize, Box<Expr<'input>>, usize),
    __2: (usize, alloc::vec::Vec<Opcode>, usize),
) -> alloc::vec::Vec<Box<Expr<'input>>> {
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action181(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action186<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, ComparisonOpcode, usize),
    __2: (usize, (&'input str, bool), usize),
    __3: (usize, &'input str, usize),
    __4: (usize, (&'input str, bool), usize),
    __5: (usize, f32, usize),
) -> Box<Expr<'input>> {
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action187<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, ComparisonOpcode, usize),
    __2: (usize, (&'input str, bool), usize),
    __3: (usize, &'input str, usize),
    __4: (usize, (&'input str, bool), usize),
) -> Box<Expr<'input>> {
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action188<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, f32, usize),
) -> ProximityTerm {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action189<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
) -> ProximityTerm {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action190<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, u8, usize),
    __2: (usize, f32, usize),
) -> ProximityTerm {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action64(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action191<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, u8, usize),
) -> ProximityTerm {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action64(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action192<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, f32, usize),
) -> Term<'input> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action193<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
) -> Term<'input> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action194<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, u8, usize),
    __2: (usize, f32, usize),
) -> Term<'input> {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action195<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, (&'input str, bool), usize),
    __1: (usize, u8, usize),
) -> Term<'input> {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action196<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, f32, usize),
) -> Term<'input> {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action197<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Term<'input> {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action198<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<Term<'input>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, f32, usize),
) -> Term<'input> {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action199<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<Term<'input>>, usize),
    __2: (usize, &'input str, usize),
) -> Term<'input> {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action200<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, f32, usize),
) -> Term<'input> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action121(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action58(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action201<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Term<'input> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action122(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action58(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action202<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, IndexLink, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Box<Expr<'input>>, usize),
    __6: (usize, Box<Expr<'input>>, usize),
    __7: (usize, &'input str, usize),
) -> Expr<'input> {
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action114(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action203<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, IndexLink, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Box<Expr<'input>>, usize),
    __6: (usize, &'input str, usize),
) -> Expr<'input> {
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __temp0 = __action115(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action204<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action109(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action205<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> String {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action110(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action206<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, String, usize),
    __3: (usize, &'input str, usize),
) -> String {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action109(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action207<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action110(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action208<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action104(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action209<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> String {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action105(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action210<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, String, usize),
    __3: (usize, &'input str, usize),
) -> String {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action104(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action165(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action211<'input>(
    source_index: Option<&PgRelation>,
    used_fields: &mut HashSet<&'input str>,
    fieldname_stack: &mut Vec<&'input str>,
    operator_stack: &mut Vec<ComparisonOpcode>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<String>, usize),
    __2: (usize, &'input str, usize),
) -> String {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action105(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action165(
        source_index,
        used_fields,
        fieldname_stack,
        operator_stack,
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}
#[allow(clippy::type_complexity)]

pub trait __ToTriple<'input> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    >;
}

impl<'input> __ToTriple<'input> for (usize, Token<'input>, usize) {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    > {
        Ok(value)
    }
}
impl<'input> __ToTriple<'input> for Result<(usize, Token<'input>, usize), &'static str> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    > {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
