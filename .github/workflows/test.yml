name: cargo pgrx test pgrxX

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  test:

    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'nogha')"

    strategy:
      matrix:
        version: [ 12, 13, 14, 15 ]
        os: [ "ubuntu-latest" ]
        es_version: [ "7.17.0" ]

    steps:
      - uses: actions/checkout@v2

      - name: cargo version
        run: cargo --version

      # Remove old Postgres
      - name: remove old Postgres
        run: sudo apt-get remove -y postgres*

        # Update apt
      - name: update apt
        run: |
          sudo apt-get update -y -qq --fix-missing
          sudo apt-get install -y wget gnupg
          sudo bash -c 'echo deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main >> /etc/apt/sources.list.d/pgdg.list'
          sudo wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt update

        # Install Postgres
      - name: install postgres
        run: sudo apt-get install -y clang llvm gcc make build-essential libz-dev zlib1g-dev strace libssl-dev pkg-config postgresql-${{ matrix.version }} postgresql-server-dev-${{ matrix.version }}

      # download Elasticsearch
      - name: download Elasticsearch
        run: curl -s https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es_version }}-linux-x86_64.tar.gz | tar xzf -
      - name: rename Elasticsearch
        run: mv elasticsearch-${{ matrix.es_version }} elasticsearch

      # update cargo indexes so we're sure we get the latest things from 'git' repo dependencies
      - name: cargo update
        run: cargo update

      - name: determine pgrx version
        id: pgx
        run: echo version=$(cargo tree --depth 1 -i pgrx | head -n 1 | cut -f2 -dv) >> $GITHUB_OUTPUT

        # install cargo-pgrx
      - name: install cargo-pgrx
        run: cargo install cargo-pgrx --version ${{ steps.pgx.outputs.version }} --locked --debug

      # initialize pgrx
      - name: cargo pgrx init
        run: cargo pgrx init --pg${{ matrix.version }}=`which pg_config`

      - name: cat config.toml
        run: cat ~/.pgrx/config.toml

      - name: hack permissions
        run: sudo chmod a+rwx `pg_config --pkglibdir` `pg_config --sharedir`/extension /var/run/postgresql/

      # test our code
      - name: cargo test --all
        run: RUST_BACKTRACE=1 cargo test --all --no-default-features --features "pg${{ matrix.version }} pg_test" -- --nocapture
