/* Generated By:JJTree: Do not edit this line. ASTIndexLink.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.tcdi.zombodb.query_parser;

public class ASTIndexLink extends com.tcdi.zombodb.query_parser.QueryParserNode {

    public static ASTIndexLink create(final String leftFieldname, final String indexName, final String alias, final String rightFieldname) {
        return create(leftFieldname, indexName, alias, rightFieldname, false);
    }

    public static ASTIndexLink create(final String leftFieldname, final String indexName, final String alias, final String rightFieldname, boolean anonymous) {
        if (anonymous) {
            return new ASTIndexLink(QueryParserTreeConstants.JJTINDEXLINK) {
                @Override
                public String getLeftFieldname() {
                    return leftFieldname;
                }

                @Override
                public String getIndexName() {
                    return indexName;
                }

                @Override
                public String getRightFieldname() {
                    return rightFieldname;
                }

                @Override
                public String getAlias() {
                    return alias;
                }
            };
        } else {
            ASTIndexLink link = new ASTIndexLink(QueryParserTreeConstants.JJTINDEXLINK);

            ASTLeftField left = new ASTLeftField(QueryParserTreeConstants.JJTLEFTFIELD);
            left.setValue(leftFieldname);
            link.jjtAddChild(left, 0);

            ASTIndexName index = new ASTIndexName(QueryParserTreeConstants.JJTINDEXNAME);
            index.setValue(indexName);
            link.jjtAddChild(index, 1);

            ASTRightField right = new ASTRightField(QueryParserTreeConstants.JJTRIGHTFIELD);
            right.setValue(rightFieldname);
            link.jjtAddChild(right, 2);

            link.alias = alias;

            return link;
        }
    }

    private String alias;

    public ASTIndexLink(int id) {
        super(id);
    }

    public ASTIndexLink(QueryParser p, int id) {
        super(p, id);
    }

    public boolean hasFieldname() {
        return getFieldname() != null;
    }

    public String getAlias() {
        return alias;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(QueryParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public String getLeftFieldname() {
        return jjtGetNumChildren() == 0 ? null : String.valueOf(getChild(0).value);
    }

    public String getIndexName() {
        return jjtGetNumChildren() == 0 ? null : String.valueOf(getChild(1).value);
    }

    public String getRightFieldname() {
        return jjtGetNumChildren() == 0 ? null : String.valueOf(getChild(2).value);
    }

    public void qualifyIndexName(String prefix) {
        getChild(1).value = prefix + "." + getChild(1).value;
    }

    public String toStringNoFieldname() {
        return getLeftFieldname() + "=<" + getIndexName() + ">" + getRightFieldname();
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof ASTIndexLink && this.toString().equals(obj.toString());
    }

    @Override
    public int hashCode() {
        return toString().hashCode();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(toStringNoFieldname());

        if (hasFieldname()) {
            sb.insert(0, getFieldname() + ":(");
            sb.append(")");
        }
        return sb.toString();
    }
}
/* JavaCC - OriginalChecksum=a599e1b5e1384d114e4c82bc47a5f71a (do not edit this line) */
