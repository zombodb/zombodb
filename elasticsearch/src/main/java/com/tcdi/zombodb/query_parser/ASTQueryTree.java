/* Generated By:JJTree: Do not edit this line. ASTQueryTree.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.tcdi.zombodb.query_parser;

import java.util.HashMap;
import java.util.Map;

public class ASTQueryTree extends com.tcdi.zombodb.query_parser.QueryParserNode {

    public ASTQueryTree(int id) {
        super(id);
    }

    public ASTQueryTree(QueryParser p, int id) {
        super(p, id);
    }

    public ASTOptions getOptions() {
        for (QueryParserNode node : this)
            if (node instanceof ASTOptions)
                return (ASTOptions) node;

        return null;
    }

    public Map<String, ASTFieldListEntry> getFieldLists() {
        Map<String, ASTFieldListEntry> entries = new HashMap<>();
        for (QueryParserNode node : this) {
            if (node instanceof ASTFieldLists) {
                for (QueryParserNode node2 : node) {
                    if (node2 instanceof ASTFieldListEntry)
                        entries.put(node2.getFieldname(), (ASTFieldListEntry) node2);
                    else
                        throw new RuntimeException("Unexpected type: " + node2.getClass());
                }
                return entries;
            }
        }

        return entries;
    }

    public ASTAggregate getAggregate() {
        for (QueryParserNode node : this)
            if (node instanceof ASTAggregate)
                return (ASTAggregate) node;

        return null;
    }

    public ASTSuggest getSuggest() {
        for (QueryParserNode node : this)
            if (node instanceof ASTSuggest)
                return (ASTSuggest) node;

        return null;
    }

    public QueryParserNode getQueryNode() {
        for (QueryParserNode node : this)
            if (!(node instanceof ASTAggregate) && !(node instanceof ASTOptions) && !(node instanceof ASTFieldLists) && !(node instanceof ASTSuggest) && !(node instanceof ASTExclude))
                return node;

        return null;
    }

    public QueryParserNode getExclusion(String indexName) {
        for (QueryParserNode node : this) {
            if (node instanceof ASTExclude) {
                if (((ASTExclude) node).getIndexName().equals(indexName))
                    return ((ASTExclude) node).getQuery();
            }
        }
        return null;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(QueryParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=0c956ef95d58a65e22ff71d801ffcd11 (do not edit this line) */
