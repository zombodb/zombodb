options {
    MULTI=true;
    STATIC = false;
    USER_CHAR_STREAM = false;
    UNICODE_INPUT = true;
    IGNORE_CASE = true;
    CACHE_TOKENS = true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    NODE_CLASS="com.tcdi.zombodb.query_parser.QueryParserNode";
}

PARSER_BEGIN(QueryParser)

package com.tcdi.zombodb.query_parser;
import com.tcdi.zombodb.query_parser.metadata.IndexMetadataManager;
import com.tcdi.zombodb.query_parser.optimizers.*;
import java.io.*;
import java.util.*;

public class QueryParser {
    private static class FieldnameRef {
        private String fieldName;
        private boolean nested;

        public FieldnameRef(String fn, boolean n) {
            fieldName = fn;
            nested = n;
        }
    }

    public static class FieldnameAndOperator {
        String fieldname;
        QueryParserNode.Operator operator;

        public FieldnameAndOperator(String fieldname, String operator) {
            this.fieldname = fieldname.trim();

            switch(operator) {
                case ":":
                    this.operator = QueryParserNode.Operator.CONTAINS;
                    break;
                case ":@":
                    this.operator = QueryParserNode.Operator.CONCEPT;
                    break;
                case ":@~":
                    this.operator = QueryParserNode.Operator.FUZZY_CONCEPT;
                    break;
                case "=":
                    this.operator = QueryParserNode.Operator.EQ;
                    break;
                case "<":
                    this.operator = QueryParserNode.Operator.LT;
                    break;
                case ">":
                    this.operator = QueryParserNode.Operator.GT;
                    break;
                case "<=":
                    this.operator = QueryParserNode.Operator.LTE;
                    break;
                case ">=":
                    this.operator = QueryParserNode.Operator.GTE;
                    break;
                case "!=":
                case "<>":
                    this.operator = QueryParserNode.Operator.NE;
                    break;
                case ":~":
                    this.operator = QueryParserNode.Operator.REGEX;
                    break;
                default:
                    throw new RuntimeException ("Unrecognized operator: " + operator);
            }
        }
    }

    private java.util.Set<String> usedFieldnames = new java.util.TreeSet(); // to keep fields sorted so that _all comes first
    private java.util.Stack<FieldnameAndOperator> fieldnameStack = new Stack();
    private boolean inArray = false;

    public ASTQueryTree parse(IndexMetadataManager metadataManager, boolean optimize) throws ParseException {
        ASTQueryTree tree = parse0();

        pullOutOptionsNodes(tree);
        metadataManager.loadReferencedMappings(tree.getOptions());

        if (optimize)
            new QueryTreeOptimizer(tree, metadataManager).optimize();

        for (ASTFieldListEntry entry : tree.getFieldLists().values()) {
            usedFieldnames.addAll(entry.getFields());
        }
        return tree;
    }

    public java.util.Set<String> getUsedFieldnames() {
        return usedFieldnames;
    }

    private void pullOutOptionsNodes(ASTQueryTree tree) {
        Collection<ASTOptions> opts = tree.getChildrenOfType(ASTOptions.class);

        if (!opts.isEmpty()) {
            ASTOptions option = opts.iterator().next();
            QueryParserNode parent = (QueryParserNode) option.jjtGetParent();

            parent.removeNode(option);
            parent.renumber();

            tree.jjtInsertChild(option, 0);
        }
    }
}
PARSER_END(QueryParser)

<DEFAULT> SKIP :
{
    " "
  | "\r"
  | "\n"
  | "\t"
  | "\f"
}

<ARRAY_CLOB> MORE :
{
      <ARRAY_DATA: (~["]"])+ >
}

<ARRAY_CLOB> TOKEN:
{
    <ARRAY_CLOB_END: "]]"> : DEFAULT
}

<DEFAULT> MORE :
{
  "[[": ARRAY_CLOB
}

<DEFAULT> TOKEN :
{
    <NOT: "not" | ("and" ([" ", "\t", "\n", "\f"])+ "not") >
  | <WITH: "with" >
  | <AND: "and" >
  | <OR: "or" >
  | <NULL: "null" >
  | <BOOLEAN: "true" | "false" >

  | <TO: "/to/" >

  | <VISIBILITY: "#visibility" >

  | <NESTED: "#nested" >
  | <TALLY: "#tally" >
  | <JSON_AGG: "#json_agg" >
  | <RANGE: "#range" >
  | <SIGNIFICANT_TERMS: "#significant_terms" >
  | <EXTENDED_STATS: "#extended_stats" >
  | <SUGGEST: "#suggest" >
  | <OPTIONS: "#options" >
  | <LIMIT: "#limit" >
  | <FIELDLISTS: "#field_lists" >
  | <EXPAND: "#expand" >
  | <FILTER: "#filter" >
  | <BOOL_QUERY: "#bool" >
  | <MUST: "#must" >
  | <SHOULD: "#should" >
  | <MUST_NOT: "#must_not" >

  | <PROX: "w/"(<DIGIT>)+ >
  | <ORDERED_PROX: "wo/"(<DIGIT>)+ >

  | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
  | <DOTTED_IDENTIFIER: <IDENTIFIER> ("." <IDENTIFIER>)+ >
  | <TYPENAME: "<" (<LETTER> (<LETTER> | <DIGIT>)*)+ ">" >

  | <NUMBER: (("-")? (["1"-"9"]) (<DIGIT>)* ("." (<DIGIT>)+)?) | (("0")+ ("." (<DIGIT>)+)) | ("0") >

  | <WORD:
               (~["'","\"",":","*","~","?","!","%","&","(",")",",","<","=",">","[","]","{","}","^"," ","\r","\n","\t","\f"] | ("\\"~[]))+
           | ("'" ((~["'","*","?","~"," ","\r","\n","\t","\f"] | ("\\"~[]))+) "'")
           | ("\"" ((~["\"","*","?","~"," ","\r","\n","\t","\f"] | ("\\"~[]))+) "\"")
    >


  | <PREFIX: (<WORD> ("*")+)
            | "'"  (<WORD> ("*")+) "'"
            | "\"" (<WORD> ("*")+) "\"" >
  | <WILDCARD: (("*" | "?")* <WORD> (("*" | "?") <WORD>)* ("*" | "?")*)
             | "'" (("*" | "?")* <WORD> (("*" | "?") <WORD>)* ("*" | "?")*) "'"
             | "\"" (("*" | "?")* <WORD> (("*" | "?") <WORD>)* ("*" | "?")*) "\""
             | ("*" | "?")+ >
  | <NOT_NULL: ("*") | ("?") | ("\"*\"") | ("\"?\"") >
  | <FUZZY: ( <WORD>
             | ("'" <WORD> "'")
             | ("\"" <WORD> "\"")
            ) "~" (<DIGIT>)* >
  | <PHRASE: (      ("\"" (~["\""] | "\\\"")* "\"") |
                    ("'"  (~["'"]  | "\\'")*  "'")
             ) ("~" ("!")? (<DIGIT>)+)?
    >
  | <SCRIPT: "$$" (~[])* "$$" >
  | <JSON_QUERY: "({" (~[])* "})" >

  | <#LETTER: ["a"-"z", "_"] >
  | <#DIGIT: ["0"-"9"] >
}

private ASTQueryTree parse0() #QueryTree :
{
}
{
    [ Expression() ] <EOF>
    {
        return jjtThis;
    }
}

void Aggregations() : {}
{
    ( Tally() | RangeAggregate() | SignificantTerms() | ExtendedStats() | JsonAgg() | Suggest() )
}

void Tally() #Tally :
{
    FieldnameRef fn;
}
{
    ( <TALLY> "(" (fn = TrackedFieldnameReference()) "," (Word()|Phrase()) "," Number() "," (Word()|Phrase()) [LOOKAHEAD(2) "," Number()] [ "," Aggregations() ] ")" )
    {
        jjtThis.setIsNested(fn.nested);
        jjtThis.fieldname = fn.fieldName;
    }
}

void JsonAgg() #JsonAgg :
{
    Token t;
}
{
    ( <JSON_AGG> t = <JSON_QUERY> )
    {
         jjtThis.value = t.image.substring(1, t.image.length()-1);
    }
}

void RangeAggregate() #RangeAggregate :
{
    FieldnameRef fn;
}
{
    ( <RANGE> "(" (fn = TrackedFieldnameReference()) "," (Word()|Phrase()) [ "," Aggregations() ] ")" )
    {
        jjtThis.setIsNested(fn.nested);
        jjtThis.fieldname = fn.fieldName;
    }
}

void SignificantTerms() #SignificantTerms :
{
    FieldnameRef fn;
}
{
    ( <SIGNIFICANT_TERMS> "(" (fn = TrackedFieldnameReference()) "," (Word()|Phrase()) "," Number() [ "," Aggregations() ] ")" )
    {
        jjtThis.setIsNested(fn.nested);
        jjtThis.fieldname = fn.fieldName;
    }
}

void ExtendedStats() #ExtendedStats :
{
    FieldnameRef fn;
}
{
    ( <EXTENDED_STATS> "(" (fn = TrackedFieldnameReference()) ")" )
    {
        jjtThis.setIsNested(fn.nested);
        jjtThis.fieldname = fn.fieldName;
    }
}

void Suggest() #Suggest :
{
    FieldnameRef fn;
}
{
    ( <SUGGEST> "(" (fn = TrackedFieldnameReference()) "," (Word()|Phrase()) "," Number() ")" )
    {
        jjtThis.fieldname = fn.fieldName;
    }
}

void Options() : {}
{
    (
        <OPTIONS>
            "("
            [
              ( IndexLink() ("," IndexLink())* )
            ]
            ")"
    ) #Options
}

void Limit() : {}
{
    (
        <LIMIT> "(" (LimitFieldname()) SortDirection() "," Number() "," Number() ")"
    ) #Limit
}

void LimitFieldname() #LimitFieldname :
{
    String fieldname;
}
{
    fieldname = Fieldname()
    {
        jjtThis.value = fieldname;
    }
}
void SortDirection() #SortDirection :
{
    Token t;
}
{
    t = <IDENTIFIER> {
        if (!(t.image.equalsIgnoreCase("asc") || t.image.equalsIgnoreCase("desc")))
            throw new ParseException ("Invalid sort direction");

        jjtThis.value = t.image.toLowerCase();
    }
}

void FieldLists() : {}
{
    (
        <FIELDLISTS> "(" [ FieldListEntry() ("," FieldListEntry())*  ] ")"

    ) #FieldLists
}

void FieldListEntry() #FieldListEntry :
{
    String fieldname;
}
{
    ( fieldname = Fieldname() "=" Array() )
    { jjtThis.fieldname = fieldname; }
}

void Visibility() #Visibility : {}
{
    <VISIBILITY> "(" Number() /* current xid */ "," Number() /* xmin */ "," Number() /* xmax */ "," Array() /* snapshot.xips */ ")"
}

void IndexLink() #IndexLink :
{
    Token t;
}
{
      LOOKAHEAD(2) ( LeftField() "=" "<" IndexName() ">" RightField() ) { jjtThis.fieldname = null; }
    | ( t = <IDENTIFIER> { jjtThis.fieldname = t.image; } ":" "(" LeftField() "=" "<" IndexName() ">" RightField() ")" )
}

void LeftField() #LeftField :
{
    Token t;
}
{
    ( t = <IDENTIFIER> | t = <DOTTED_IDENTIFIER> )
    { jjtThis.value = t.image; }
}

void IndexName() #IndexName :
{
    Token t;
}
{
    ( t = <DOTTED_IDENTIFIER> )
    {
        jjtThis.value = t.image;
    }
}


void RightField() #RightField :
{
    Token t;
}
{
    ( t = <IDENTIFIER> | t = <DOTTED_IDENTIFIER> )
    { jjtThis.value = t.image; }
}



void Expression() : {}
{
    /* consume leading ANDs/ORs                    consuming trailing ANDs/ORs/NOTs */
    (<AND> | <OR> | "," | "&")*                    OrExpression() (<AND> | <OR> | "," | "&" | <NOT> | "!")*
}

void OrExpression(): {}
{
    (
        AndExpression()  (LOOKAHEAD(2)  (<OR>|",")+ AndExpression() )*
    ) #Or(>1)
}

void AndExpression() : {}
{
    (
        /* optional <AND> makes it the default operator between words */
        WithExpression() (LOOKAHEAD(2)  (<AND>|"&")* WithExpression() )*
    ) #And(>1)
}

void WithExpression() : {}
{
    (
        /* optional <AND> makes it the default operator between words */
        ProximityExpression() (LOOKAHEAD(2)  (<WITH>|"%")+ ProximityExpression() )*
    ) #With(>1)
}

void ProximityExpression() : {}
{
    (
        UnaryExpression() (LOOKAHEAD(2) ProximityOperator(jjtThis) ProximityExpression() )*
    ) #Proximity(>1)
}

void LiteralProximityExpression() : {}
{
    (
        Literal() (LOOKAHEAD(2) ProximityOperator(jjtThis) LiteralProximityExpression() )*
    ) #Proximity(>1)
}

void ProximityOperator(QueryParserNode node) :
{
    Token prox;
    boolean ordered = false;
    int distance = 0;
}
{
    ( prox=<PROX> | ( prox=<ORDERED_PROX> { ordered = true; } ) )
    {
        node.distance = Integer.valueOf(prox.image.substring(prox.image.indexOf('/')+1));
        node.fieldname = fieldnameStack.isEmpty() ? "_all" : fieldnameStack.peek() == null ? "_all" : fieldnameStack.peek().fieldname;
        node.operator = fieldnameStack.isEmpty() ? QueryParserNode.Operator.CONTAINS : fieldnameStack.peek() == null ? QueryParserNode.Operator.CONTAINS : fieldnameStack.peek().operator;
        node.ordered = ordered;
    }
}

void UnaryExpression() :
{
    QueryParserNode n = null;
    FieldnameAndOperator fao;
}
{
    (
          n = Not()
        | LOOKAHEAD(3) (fao = OptionalFieldname()) "(" {fieldnameStack.push(fao);} Expression() {fieldnameStack.pop();} ")"
        | ("(" ")") // just ignore empty parens, ie:  ()
        | Limit() | Options() | Aggregations() | FieldLists() | Visibility()
        | n = Expansion()
        | n = JsonQuery()
        | n = BoolQuery()
        | n = Literal()
        | n = Script()
    )
     {
        if (n != null && n.operator == QueryParserNode.Operator.REGEX && n instanceof ASTPrefix) {
            /*
               convert nodes that are REGEX queries that got parsed into ASTPrefix nodes
               back into generic ASTWord nodes.  This could happen if the regex ends with an
               asterick, ie:  ^.*
             */
            ASTWord word = new ASTWord(QueryParserTreeConstants.JJTWORD);
            word.value = String.valueOf(n.value) + "*";
            word.fieldname = n.fieldname;
            word.operator = n.operator;
            word.boost = n.boost;

            jjtree.popNode();
            jjtree.pushNode(word);
        }
    }
}

QueryParserNode Literal() :
{
    QueryParserNode n = null;
    FieldnameAndOperator fao;
}
{
    fao = OptionalFieldname() (
        LOOKAHEAD(2)
          n = Range()
        | n = Fuzzy()
        | n = Prefix()
        | n = Wildcard()
        | n = NotNull()
        | n = Word()
        | n = Phrase()
        | n = Boolean()
        | n = Null()
        | n = Number()
        | n = Array()
        | n = ArrayData()

    ) OptionalBoost(n)
    {
        if (!inArray) {
            if (fao == null)
               fao = fieldnameStack.isEmpty() ? null : fieldnameStack.peek();

            if (n instanceof ASTRange) {
                // don't set the fieldname of ASTRange child nodes
                n.fieldname = fao == null ? "_all" : fao.fieldname;
            } else {
                // set fieldname for this node and all its children
                n.forceFieldname(fao == null ? "_all" : fao.fieldname);
            }

            n.operator = fao == null ? QueryParserNode.Operator.CONTAINS : fao.operator;
        }
        return n;
    }
}

QueryParserNode Not() #Not : {}
{
    (
        (LOOKAHEAD(2) (<NOT>|"!") UnaryExpression() )+
    )
    { return jjtThis; }
}

QueryParserNode Expansion() #Expansion : { }
{
    ( <EXPAND> "<" IndexLink() ">" "(" Expression() [Filter()] ")" )
    {
        jjtThis.setGenerated(true);
        return jjtThis;
    }
}

QueryParserNode Filter() #Filter : {}
{
    ( <FILTER> "(" Expression() ")" )
    { return jjtThis; }
}

QueryParserNode JsonQuery() #JsonQuery :
{
    Token t;
}
{
    ( t = <JSON_QUERY> )
    {
        jjtThis.value = t.image.substring(1, t.image.length()-1);
        return jjtThis;
    }
}

void OptionalBoost(QueryParserNode n) :
{
    Token t;
}
{
    { if (n == null) return; }
    [ LOOKAHEAD(2) "^" t = <NUMBER> { n.boost = Float.valueOf(t.image); } ]
}

FieldnameAndOperator OptionalFieldname() :
{
    FieldnameRef fn = null;
    Token op = null;
}
{
    (
        [
            LOOKAHEAD(2) fn = TrackedFieldnameReference()
                (
                      op = ":"
                    | op = "="
                    | op = "<"
                    | op = ">"
                    | op = "<="
                    | op = ">="
                    | op = "<>"
                    | op = "!="
                    | op = ":@"
                    | op = ":@~"
                    | op = ":~"
                )
        ]
    )
    {
        if (fn != null) {
            return new FieldnameAndOperator(fn.fieldName, op.image);
        } else {
            usedFieldnames.add("_all");
            return fieldnameStack.isEmpty() ? new FieldnameAndOperator("_all", ":") : fieldnameStack.peek();
        }
    }
}

FieldnameRef TrackedFieldnameReference() :
{
    Token nested = null;
    String fieldname;
}
{
    (
        fieldname = Fieldname()
      | nested=<NESTED> "(" fieldname = Fieldname() ")"
    )
    {
        usedFieldnames.add(fieldname);
        return new FieldnameRef(fieldname, nested != null);
    }
}

String Fieldname() :
{
    Token t;
}
{
    (
       LOOKAHEAD(2) (t = <IDENTIFIER> | t = <WORD>)
      | LOOKAHEAD(2) t = <DOTTED_IDENTIFIER>
    )

    { return t.image; }
}

QueryParserNode Range() #Range(2) : {}
{
    (
        (Word() | Number() | Phrase()) <TO> (Word() | Number() | Phrase())
    )
    { return jjtThis; }
}

QueryParserNode Word() #Word :
{
    Token t;
}
{
    (
        ( (t = <WORD>) | (t = <IDENTIFIER>) | (t = <DOTTED_IDENTIFIER>) ) {
            String word = t.image;
            if (word.startsWith("'") || word.startsWith("\""))
                word = word.substring(1, word.length()-1);
            jjtThis.value = word;
        }
    )
    { return jjtThis; }
}

QueryParserNode Prefix() #Prefix :
{
    Token t;
}
{
    (
        t = <PREFIX>
        {
            if ( (t.image.startsWith("'") && t.image.endsWith("'")) || (t.image.startsWith("\"") && t.image.endsWith("\"")) )
                t.image = t.image.substring(1, t.image.length()-1);

            jjtThis.value = t.image.substring(0, t.image.indexOf('*'));
        }
    )
    { return jjtThis; }
}

QueryParserNode Wildcard() #Wildcard :
{
    Token t;
}
{
    (
        t = <WILDCARD> {
            if ( (t.image.startsWith("'") && t.image.endsWith("'")) || (t.image.startsWith("\"") && t.image.endsWith("\"")) )
                t.image = t.image.substring(1, t.image.length()-1);
            jjtThis.value = t.image;
        }
    )
    { return jjtThis; }
}

QueryParserNode NotNull() #NotNull :
{
    Token t;
}
{
    (
        t = <NOT_NULL>
    )
    { return jjtThis; }
}

QueryParserNode Fuzzy() #Fuzzy :
{
    Token t;
}
{
    (
        t = <FUZZY>
        {
            int idx = t.image.indexOf('~');

            jjtThis.value = t.image.substring(0, idx);
            if ((jjtThis.value.toString().startsWith("'") && jjtThis.value.toString().endsWith("'") ||
               (jjtThis.value.toString().startsWith("\"") && jjtThis.value.toString().endsWith("\""))))
               jjtThis.value = jjtThis.value.toString().substring(1, jjtThis.value.toString().length()-1);


            try {
                jjtThis.fuzzyness = Integer.valueOf(t.image.substring(idx+1));
            } catch (NumberFormatException nfe) {
                // ignore it
            }
        }
    )
    { return jjtThis; }
}

QueryParserNode Phrase() #Phrase :
{
    Token t;
}
{
    (
        t = <PHRASE>
        {
            String value = t.image;
            int slop = 0;
            boolean inOrder = true;
            if (value.charAt(value.length()-1) != '"' && value.charAt(value.length()-1) != '\'') {
                // has a slop value
                try {
                    slop = Integer.parseInt(value.substring(value.lastIndexOf('~')+1));
                } catch (NumberFormatException nfe) {
                    // probably because user specified ! in order
                    slop = Integer.parseInt(value.substring(value.lastIndexOf('~')+2));
                    inOrder = false;
                }
                value = value.substring(1, value.lastIndexOf('~')-1);
            } else {
                value = value.substring(1, t.image.length()-1).trim();
            }

            jjtThis.value = value;
            jjtThis.distance = slop;
            jjtThis.ordered = inOrder;
        }
    )
    { return jjtThis; }
}

QueryParserNode Array() #Array(>0) :
{
}
{
    (
        "[" { inArray = true; } [ (Literal() ( "," Literal() )*) ] { inArray = false; } "]"
    )
    { return jjtThis; }
}

QueryParserNode ArrayData() #ArrayData :
{
    Token t;
}
{
    ( t = <ARRAY_CLOB_END>)
    {
        jjtThis.value = t.image.substring(2, t.image.length()-2);
        return jjtThis;
    }
}

QueryParserNode Boolean() #Boolean :
{
    Token t;
}
{
    (
        t = <BOOLEAN> { jjtThis.value = Boolean.valueOf(t.image); }
    )
    { return jjtThis; }
}

QueryParserNode Null() #Null :
{
    Token t;
}
{
    (
        t = <NULL>
    )
    { return jjtThis; }
}

QueryParserNode Number() #Number :
{
    Token t;
}
{
    (
        t = <NUMBER> {
            jjtThis.value = t.image;
        }
    )
    { return jjtThis; }
}

QueryParserNode Script() #Script :
{
    Token t;
}
{
    (
        t = <SCRIPT>
    )
    {
        jjtThis.value = t.image.substring(2, t.image.length()-2);
        return jjtThis;
    }
}

QueryParserNode BoolQuery() #BoolQuery :
{

}
{
    ( <BOOL_QUERY> "(" ( (<MUST> Must() #Must) | (<SHOULD> Should() #Should) | (<MUST_NOT> MustNot() #MustNot) )* ")" )
    {
        return jjtThis;
    }
}

void Must() :
{
    FieldnameAndOperator fop = null;
}
{
    fop = OptionalFieldname() { fieldnameStack.push(fop); } "("
        (LOOKAHEAD(3) (_ignored_tokens_() | LiteralProximityExpression()) | Must() )*
    { fieldnameStack.pop(); } ")"
}

void Should() :
{
    FieldnameAndOperator fop = null;
}
{
    fop = OptionalFieldname() { fieldnameStack.push(fop); } "("
        (LOOKAHEAD(3) (_ignored_tokens_() | LiteralProximityExpression()) | Should() )*
    { fieldnameStack.pop(); } ")"
}

void MustNot() :
{
    FieldnameAndOperator fop = null;
}
{
    fop = OptionalFieldname() { fieldnameStack.push(fop); } "("
        (LOOKAHEAD(3) (_ignored_tokens_() | LiteralProximityExpression()) | MustNot() )*
    { fieldnameStack.pop(); } ")"
}

void _ignored_tokens_() : {}
{
      ","
    | "&"
    | "!"
    | "%"
    | <AND>
    | <OR>
    | <NOT>
    | <WITH>
}
